
JLoggerDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bbc  08002bbc  00012bbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b4  2000000c  08002bf8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002c0  08002bf8  000202c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eb4a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002294  00000000  00000000  0002eb86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007653  00000000  00000000  00030e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a38  00000000  00000000  00038470  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d98  00000000  00000000  00038ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000052a0  00000000  00000000  00039c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004071  00000000  00000000  0003eee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00042f51  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ea0  00000000  00000000  00042fd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002ba4 	.word	0x08002ba4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002ba4 	.word	0x08002ba4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 fabc 	bl	8000aa8 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000540:	f000 fa70 	bl	8000a24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 fa41 	bl	8000a00 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f002 f8d0 	bl	8002728 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b6:	4604      	mov	r4, r0
 80005b8:	2800      	cmp	r0, #0
 80005ba:	f000 809b 	beq.w	80006f4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005be:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005c0:	b925      	cbnz	r5, 80005cc <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005c2:	f002 f8d1 	bl	8002768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005c6:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005c8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ce:	06db      	lsls	r3, r3, #27
 80005d0:	f100 808e 	bmi.w	80006f0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005da:	f023 0302 	bic.w	r3, r3, #2
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005e4:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <HAL_ADC_Init+0x144>)
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005ec:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	6861      	ldr	r1, [r4, #4]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005f6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005f8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800060a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800060c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800060e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000612:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000614:	685a      	ldr	r2, [r3, #4]
 8000616:	430a      	orrs	r2, r1
 8000618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800061a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800061c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800061e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	430a      	orrs	r2, r1
 8000628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800062a:	4934      	ldr	r1, [pc, #208]	; (80006fc <HAL_ADC_Init+0x148>)
 800062c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800062e:	428a      	cmp	r2, r1
 8000630:	d052      	beq.n	80006d8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000632:	6899      	ldr	r1, [r3, #8]
 8000634:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000638:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800063a:	6899      	ldr	r1, [r3, #8]
 800063c:	430a      	orrs	r2, r1
 800063e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000640:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000642:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800064e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000650:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000652:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000654:	f022 0202 	bic.w	r2, r2, #2
 8000658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000660:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000662:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000666:	2a00      	cmp	r2, #0
 8000668:	d03e      	beq.n	80006e8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800066a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800066c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800066e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800067a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	3901      	subs	r1, #1
 8000680:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000684:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000688:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800068a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000692:	3901      	subs	r1, #1
 8000694:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800069a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800069c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006a6:	689a      	ldr	r2, [r3, #8]
 80006a8:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006ac:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006b0:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006b8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006ba:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006bc:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006c0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006c2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006d0:	2300      	movs	r3, #0
 80006d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006d6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006e6:	e7b2      	b.n	800064e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006ee:	e7c9      	b.n	8000684 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006f0:	2001      	movs	r0, #1
 80006f2:	e7ed      	b.n	80006d0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006f4:	2001      	movs	r0, #1
}
 80006f6:	bd38      	pop	{r3, r4, r5, pc}
 80006f8:	40012300 	.word	0x40012300
 80006fc:	0f000001 	.word	0x0f000001

08000700 <HAL_ADC_Start_DMA>:
{
 8000700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000702:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8000704:	2200      	movs	r2, #0
 8000706:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000708:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800070c:	2a01      	cmp	r2, #1
{
 800070e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000710:	d077      	beq.n	8000802 <HAL_ADC_Start_DMA+0x102>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000712:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8000714:	2201      	movs	r2, #1
 8000716:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800071a:	68aa      	ldr	r2, [r5, #8]
 800071c:	07d0      	lsls	r0, r2, #31
 800071e:	d505      	bpl.n	800072c <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000720:	68aa      	ldr	r2, [r5, #8]
 8000722:	07d2      	lsls	r2, r2, #31
 8000724:	d415      	bmi.n	8000752 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8000726:	2000      	movs	r0, #0
}
 8000728:	b003      	add	sp, #12
 800072a:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800072c:	68aa      	ldr	r2, [r5, #8]
 800072e:	f042 0201 	orr.w	r2, r2, #1
 8000732:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000734:	4a34      	ldr	r2, [pc, #208]	; (8000808 <HAL_ADC_Start_DMA+0x108>)
 8000736:	6810      	ldr	r0, [r2, #0]
 8000738:	4a34      	ldr	r2, [pc, #208]	; (800080c <HAL_ADC_Start_DMA+0x10c>)
 800073a:	fbb0 f0f2 	udiv	r0, r0, r2
 800073e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000742:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8000744:	9a01      	ldr	r2, [sp, #4]
 8000746:	2a00      	cmp	r2, #0
 8000748:	d0ea      	beq.n	8000720 <HAL_ADC_Start_DMA+0x20>
      counter--;
 800074a:	9a01      	ldr	r2, [sp, #4]
 800074c:	3a01      	subs	r2, #1
 800074e:	9201      	str	r2, [sp, #4]
 8000750:	e7f8      	b.n	8000744 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8000752:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000754:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000758:	f020 0001 	bic.w	r0, r0, #1
 800075c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000760:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000762:	686a      	ldr	r2, [r5, #4]
 8000764:	0550      	lsls	r0, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000766:	bf41      	itttt	mi
 8000768:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 800076a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800076e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000772:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000774:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000776:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800077c:	bf1c      	itt	ne
 800077e:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8000780:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000784:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8000786:	2200      	movs	r2, #0
 8000788:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800078c:	4a20      	ldr	r2, [pc, #128]	; (8000810 <HAL_ADC_Start_DMA+0x110>)
 800078e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000790:	4a20      	ldr	r2, [pc, #128]	; (8000814 <HAL_ADC_Start_DMA+0x114>)
 8000792:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000794:	4a20      	ldr	r2, [pc, #128]	; (8000818 <HAL_ADC_Start_DMA+0x118>)
 8000796:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000798:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800079c:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800079e:	686a      	ldr	r2, [r5, #4]
 80007a0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80007a4:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80007a6:	68aa      	ldr	r2, [r5, #8]
 80007a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007ac:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80007ae:	460a      	mov	r2, r1
 80007b0:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80007b4:	f000 fa22 	bl	8000bfc <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007b8:	4a18      	ldr	r2, [pc, #96]	; (800081c <HAL_ADC_Start_DMA+0x11c>)
 80007ba:	4919      	ldr	r1, [pc, #100]	; (8000820 <HAL_ADC_Start_DMA+0x120>)
 80007bc:	6853      	ldr	r3, [r2, #4]
 80007be:	f013 0f1f 	tst.w	r3, #31
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	d11a      	bne.n	80007fc <HAL_ADC_Start_DMA+0xfc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007c6:	428b      	cmp	r3, r1
 80007c8:	d006      	beq.n	80007d8 <HAL_ADC_Start_DMA+0xd8>
 80007ca:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d10b      	bne.n	80007ea <HAL_ADC_Start_DMA+0xea>
 80007d2:	6852      	ldr	r2, [r2, #4]
 80007d4:	06d2      	lsls	r2, r2, #27
 80007d6:	d1a6      	bne.n	8000726 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007d8:	6898      	ldr	r0, [r3, #8]
 80007da:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80007de:	d1a2      	bne.n	8000726 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	e79e      	b.n	8000728 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007ea:	490e      	ldr	r1, [pc, #56]	; (8000824 <HAL_ADC_Start_DMA+0x124>)
 80007ec:	428b      	cmp	r3, r1
 80007ee:	d19a      	bne.n	8000726 <HAL_ADC_Start_DMA+0x26>
 80007f0:	6852      	ldr	r2, [r2, #4]
 80007f2:	f002 021f 	and.w	r2, r2, #31
 80007f6:	2a0f      	cmp	r2, #15
 80007f8:	d9ee      	bls.n	80007d8 <HAL_ADC_Start_DMA+0xd8>
 80007fa:	e794      	b.n	8000726 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007fc:	428b      	cmp	r3, r1
 80007fe:	d192      	bne.n	8000726 <HAL_ADC_Start_DMA+0x26>
 8000800:	e7ea      	b.n	80007d8 <HAL_ADC_Start_DMA+0xd8>
  __HAL_LOCK(hadc);
 8000802:	2002      	movs	r0, #2
 8000804:	e790      	b.n	8000728 <HAL_ADC_Start_DMA+0x28>
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008
 800080c:	000f4240 	.word	0x000f4240
 8000810:	0800084f 	.word	0x0800084f
 8000814:	0800082d 	.word	0x0800082d
 8000818:	08000839 	.word	0x08000839
 800081c:	40012300 	.word	0x40012300
 8000820:	40012000 	.word	0x40012000
 8000824:	40012200 	.word	0x40012200

08000828 <HAL_ADC_ConvCpltCallback>:
 8000828:	4770      	bx	lr

0800082a <HAL_ADC_ConvHalfCpltCallback>:
 800082a:	4770      	bx	lr

0800082c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800082c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800082e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000830:	f7ff fffb 	bl	800082a <HAL_ADC_ConvHalfCpltCallback>
 8000834:	bd08      	pop	{r3, pc}

08000836 <HAL_ADC_ErrorCallback>:
{
 8000836:	4770      	bx	lr

08000838 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000838:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800083a:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000840:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000848:	f7ff fff5 	bl	8000836 <HAL_ADC_ErrorCallback>
 800084c:	bd08      	pop	{r3, pc}

0800084e <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800084e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000852:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000856:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800085a:	d123      	bne.n	80008a4 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800085c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000860:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	6891      	ldr	r1, [r2, #8]
 8000866:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800086a:	d117      	bne.n	800089c <ADC_DMAConvCplt+0x4e>
 800086c:	7e19      	ldrb	r1, [r3, #24]
 800086e:	b9a9      	cbnz	r1, 800089c <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000870:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000872:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000876:	d002      	beq.n	800087e <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000878:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800087a:	0548      	lsls	r0, r1, #21
 800087c:	d40e      	bmi.n	800089c <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800087e:	6851      	ldr	r1, [r2, #4]
 8000880:	f021 0120 	bic.w	r1, r1, #32
 8000884:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800088c:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800088e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000890:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000892:	bf5e      	ittt	pl
 8000894:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8000896:	f042 0201 	orrpl.w	r2, r2, #1
 800089a:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffc3 	bl	8000828 <HAL_ADC_ConvCpltCallback>
 80008a2:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80008a4:	06d2      	lsls	r2, r2, #27
 80008a6:	d503      	bpl.n	80008b0 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ffc4 	bl	8000836 <HAL_ADC_ErrorCallback>
 80008ae:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80008b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80008b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	4718      	bx	r3
	...

080008bc <HAL_ADC_ConfigChannel>:
{
 80008bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80008be:	2300      	movs	r3, #0
 80008c0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d06e      	beq.n	80009a8 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008ca:	680d      	ldr	r5, [r1, #0]
 80008cc:	6804      	ldr	r4, [r0, #0]
 80008ce:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80008d0:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008d2:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80008d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80008d8:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008da:	d92a      	bls.n	8000932 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008dc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80008e0:	68e7      	ldr	r7, [r4, #12]
 80008e2:	3b1e      	subs	r3, #30
 80008e4:	f04f 0e07 	mov.w	lr, #7
 80008e8:	fa0e fe03 	lsl.w	lr, lr, r3
 80008ec:	ea27 070e 	bic.w	r7, r7, lr
 80008f0:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008f2:	68e7      	ldr	r7, [r4, #12]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	433b      	orrs	r3, r7
 80008fa:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80008fc:	684a      	ldr	r2, [r1, #4]
 80008fe:	2a06      	cmp	r2, #6
 8000900:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000904:	d825      	bhi.n	8000952 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000906:	4413      	add	r3, r2
 8000908:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800090a:	1f59      	subs	r1, r3, #5
 800090c:	231f      	movs	r3, #31
 800090e:	408b      	lsls	r3, r1
 8000910:	ea27 0303 	bic.w	r3, r7, r3
 8000914:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000916:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000918:	fa06 f101 	lsl.w	r1, r6, r1
 800091c:	4311      	orrs	r1, r2
 800091e:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000920:	4b32      	ldr	r3, [pc, #200]	; (80009ec <HAL_ADC_ConfigChannel+0x130>)
 8000922:	429c      	cmp	r4, r3
 8000924:	d034      	beq.n	8000990 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8000926:	2300      	movs	r3, #0
 8000928:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800092c:	4618      	mov	r0, r3
}
 800092e:	b003      	add	sp, #12
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000932:	6927      	ldr	r7, [r4, #16]
 8000934:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000938:	f04f 0e07 	mov.w	lr, #7
 800093c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000940:	ea27 070e 	bic.w	r7, r7, lr
 8000944:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000946:	6927      	ldr	r7, [r4, #16]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	433b      	orrs	r3, r7
 800094e:	6123      	str	r3, [r4, #16]
 8000950:	e7d4      	b.n	80008fc <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000952:	2a0c      	cmp	r2, #12
 8000954:	d80e      	bhi.n	8000974 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000956:	4413      	add	r3, r2
 8000958:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800095a:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800095e:	231f      	movs	r3, #31
 8000960:	4093      	lsls	r3, r2
 8000962:	ea21 0303 	bic.w	r3, r1, r3
 8000966:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800096a:	fa06 f202 	lsl.w	r2, r6, r2
 800096e:	431a      	orrs	r2, r3
 8000970:	6322      	str	r2, [r4, #48]	; 0x30
 8000972:	e7d5      	b.n	8000920 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000974:	4413      	add	r3, r2
 8000976:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000978:	3b41      	subs	r3, #65	; 0x41
 800097a:	221f      	movs	r2, #31
 800097c:	409a      	lsls	r2, r3
 800097e:	ea21 0202 	bic.w	r2, r1, r2
 8000982:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000984:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000986:	fa06 f103 	lsl.w	r1, r6, r3
 800098a:	4311      	orrs	r1, r2
 800098c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800098e:	e7c7      	b.n	8000920 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000990:	2d12      	cmp	r5, #18
 8000992:	d10b      	bne.n	80009ac <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_ADC_ConfigChannel+0x134>)
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800099c:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	e7be      	b.n	8000926 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80009a8:	2002      	movs	r0, #2
 80009aa:	e7c0      	b.n	800092e <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_ADC_ConfigChannel+0x138>)
 80009ae:	429d      	cmp	r5, r3
 80009b0:	d001      	beq.n	80009b6 <HAL_ADC_ConfigChannel+0xfa>
 80009b2:	2d11      	cmp	r5, #17
 80009b4:	d1b7      	bne.n	8000926 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_ADC_ConfigChannel+0x134>)
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80009be:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80009c6:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_ADC_ConfigChannel+0x138>)
 80009ca:	429d      	cmp	r5, r3
 80009cc:	d1ab      	bne.n	8000926 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_ADC_ConfigChannel+0x13c>)
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_ADC_ConfigChannel+0x140>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80009d8:	230a      	movs	r3, #10
 80009da:	4353      	muls	r3, r2
        counter--;
 80009dc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80009de:	9b01      	ldr	r3, [sp, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0a0      	beq.n	8000926 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80009e4:	9b01      	ldr	r3, [sp, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	e7f8      	b.n	80009dc <HAL_ADC_ConfigChannel+0x120>
 80009ea:	bf00      	nop
 80009ec:	40012000 	.word	0x40012000
 80009f0:	40012300 	.word	0x40012300
 80009f4:	10000012 	.word	0x10000012
 80009f8:	20000008 	.word	0x20000008
 80009fc:	000f4240 	.word	0x000f4240

08000a00 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a02:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a08:	041b      	lsls	r3, r3, #16
 8000a0a:	0c1b      	lsrs	r3, r3, #16
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	0200      	lsls	r0, r0, #8
 8000a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a16:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a1a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a1c:	60d3      	str	r3, [r2, #12]
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a26:	b530      	push	{r4, r5, lr}
 8000a28:	68dc      	ldr	r4, [r3, #12]
 8000a2a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	bf28      	it	cs
 8000a38:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 0501 	mov.w	r5, #1
 8000a40:	fa05 f303 	lsl.w	r3, r5, r3
 8000a44:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a48:	bf8c      	ite	hi
 8000a4a:	3c03      	subhi	r4, #3
 8000a4c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4e:	4019      	ands	r1, r3
 8000a50:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a52:	fa05 f404 	lsl.w	r4, r5, r4
 8000a56:	3c01      	subs	r4, #1
 8000a58:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000a5a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	ea42 0201 	orr.w	r2, r2, r1
 8000a60:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	bfad      	iteet	ge
 8000a66:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	f000 000f 	andlt.w	r0, r0, #15
 8000a6e:	4b06      	ldrlt	r3, [pc, #24]	; (8000a88 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	bfb5      	itete	lt
 8000a76:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a80:	bd30      	pop	{r4, r5, pc}
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	e000ed14 	.word	0xe000ed14

08000a8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	db08      	blt.n	8000aa2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a90:	0942      	lsrs	r2, r0, #5
 8000a92:	2301      	movs	r3, #1
 8000a94:	f000 001f 	and.w	r0, r0, #31
 8000a98:	fa03 f000 	lsl.w	r0, r3, r0
 8000a9c:	4b01      	ldr	r3, [pc, #4]	; (8000aa4 <HAL_NVIC_EnableIRQ+0x18>)
 8000a9e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aae:	d20a      	bcs.n	8000ac6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	21f0      	movs	r1, #240	; 0xf0
 8000ab8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ad4:	6803      	ldr	r3, [r0, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000adc:	f023 0303 	bic.w	r3, r3, #3
 8000ae0:	2118      	movs	r1, #24
 8000ae2:	3a10      	subs	r2, #16
 8000ae4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ae8:	4904      	ldr	r1, [pc, #16]	; (8000afc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000aea:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000aec:	bf88      	it	hi
 8000aee:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000af0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000af2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000af4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000af6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	08002bbc 	.word	0x08002bbc

08000b00 <HAL_DMA_Init>:
{
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff fd50 	bl	80005a8 <HAL_GetTick>
 8000b08:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d071      	beq.n	8000bf2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000b14:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000b1c:	6813      	ldr	r3, [r2, #0]
 8000b1e:	f023 0301 	bic.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b24:	6821      	ldr	r1, [r4, #0]
 8000b26:	680b      	ldr	r3, [r1, #0]
 8000b28:	07d8      	lsls	r0, r3, #31
 8000b2a:	d43c      	bmi.n	8000ba6 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000b2c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b2e:	4d32      	ldr	r5, [pc, #200]	; (8000bf8 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b30:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b32:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b34:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b36:	68a3      	ldr	r3, [r4, #8]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	68e2      	ldr	r2, [r4, #12]
 8000b3c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b3e:	6922      	ldr	r2, [r4, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	6962      	ldr	r2, [r4, #20]
 8000b44:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b46:	69e2      	ldr	r2, [r4, #28]
 8000b48:	4303      	orrs	r3, r0
 8000b4a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b4c:	6a22      	ldr	r2, [r4, #32]
 8000b4e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b52:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b54:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b58:	bf01      	itttt	eq
 8000b5a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000b5c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000b5e:	4335      	orreq	r5, r6
 8000b60:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000b62:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000b64:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b66:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b68:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000b6c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b70:	d10b      	bne.n	8000b8a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000b72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b74:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000b76:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b78:	b13d      	cbz	r5, 8000b8a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b7a:	b9f8      	cbnz	r0, 8000bbc <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000b7c:	2a01      	cmp	r2, #1
 8000b7e:	d02d      	beq.n	8000bdc <HAL_DMA_Init+0xdc>
 8000b80:	d301      	bcc.n	8000b86 <HAL_DMA_Init+0x86>
 8000b82:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000b84:	d101      	bne.n	8000b8a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b86:	01ea      	lsls	r2, r5, #7
 8000b88:	d42b      	bmi.n	8000be2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000b8a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff ffa1 	bl	8000ad4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b94:	233f      	movs	r3, #63	; 0x3f
 8000b96:	4093      	lsls	r3, r2
 8000b98:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b9a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000b9c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b9e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000ba0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ba6:	f7ff fcff 	bl	80005a8 <HAL_GetTick>
 8000baa:	1b40      	subs	r0, r0, r5
 8000bac:	2805      	cmp	r0, #5
 8000bae:	d9b9      	bls.n	8000b24 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bb4:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000bb6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000bbc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000bc0:	d113      	bne.n	8000bea <HAL_DMA_Init+0xea>
    switch (tmp)
 8000bc2:	2a03      	cmp	r2, #3
 8000bc4:	d8e1      	bhi.n	8000b8a <HAL_DMA_Init+0x8a>
 8000bc6:	a001      	add	r0, pc, #4	; (adr r0, 8000bcc <HAL_DMA_Init+0xcc>)
 8000bc8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000bcc:	08000be3 	.word	0x08000be3
 8000bd0:	08000b87 	.word	0x08000b87
 8000bd4:	08000be3 	.word	0x08000be3
 8000bd8:	08000bdd 	.word	0x08000bdd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bdc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000be0:	d1d3      	bne.n	8000b8a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000be6:	2001      	movs	r0, #1
 8000be8:	e7e5      	b.n	8000bb6 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000bea:	2a02      	cmp	r2, #2
 8000bec:	d9f9      	bls.n	8000be2 <HAL_DMA_Init+0xe2>
 8000bee:	2a03      	cmp	r2, #3
 8000bf0:	e7c8      	b.n	8000b84 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	bd70      	pop	{r4, r5, r6, pc}
 8000bf6:	bf00      	nop
 8000bf8:	f010803f 	.word	0xf010803f

08000bfc <HAL_DMA_Start_IT>:
{
 8000bfc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000bfe:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000c02:	2c01      	cmp	r4, #1
 8000c04:	d036      	beq.n	8000c74 <HAL_DMA_Start_IT+0x78>
 8000c06:	2401      	movs	r4, #1
 8000c08:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c0c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c10:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c12:	2c01      	cmp	r4, #1
 8000c14:	f04f 0500 	mov.w	r5, #0
 8000c18:	f04f 0402 	mov.w	r4, #2
 8000c1c:	d128      	bne.n	8000c70 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c1e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c22:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c24:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c26:	6825      	ldr	r5, [r4, #0]
 8000c28:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000c2c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000c2e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c30:	6883      	ldr	r3, [r0, #8]
 8000c32:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000c34:	bf0e      	itee	eq
 8000c36:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000c38:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c3a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c3c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000c3e:	bf08      	it	eq
 8000c40:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c42:	233f      	movs	r3, #63	; 0x3f
 8000c44:	4093      	lsls	r3, r2
 8000c46:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	f043 0316 	orr.w	r3, r3, #22
 8000c4e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000c50:	6963      	ldr	r3, [r4, #20]
 8000c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c56:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c58:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c5a:	b11b      	cbz	r3, 8000c64 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000c70:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000c74:	2002      	movs	r0, #2
}
 8000c76:	bd70      	pop	{r4, r5, r6, pc}

08000c78 <HAL_DMA_IRQHandler>:
{
 8000c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c7e:	4b5a      	ldr	r3, [pc, #360]	; (8000de8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c80:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c82:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c84:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000c86:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c88:	2208      	movs	r2, #8
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	4216      	tst	r6, r2
{
 8000c8e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c90:	d00c      	beq.n	8000cac <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c92:	6801      	ldr	r1, [r0, #0]
 8000c94:	6808      	ldr	r0, [r1, #0]
 8000c96:	0740      	lsls	r0, r0, #29
 8000c98:	d508      	bpl.n	8000cac <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000c9a:	6808      	ldr	r0, [r1, #0]
 8000c9c:	f020 0004 	bic.w	r0, r0, #4
 8000ca0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ca2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ca4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ca6:	f042 0201 	orr.w	r2, r2, #1
 8000caa:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cac:	2201      	movs	r2, #1
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	4216      	tst	r6, r2
 8000cb2:	d008      	beq.n	8000cc6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000cb4:	6821      	ldr	r1, [r4, #0]
 8000cb6:	6949      	ldr	r1, [r1, #20]
 8000cb8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000cba:	bf41      	itttt	mi
 8000cbc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000cbe:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000cc0:	f042 0202 	orrmi.w	r2, r2, #2
 8000cc4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	409a      	lsls	r2, r3
 8000cca:	4216      	tst	r6, r2
 8000ccc:	d008      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000cce:	6821      	ldr	r1, [r4, #0]
 8000cd0:	6809      	ldr	r1, [r1, #0]
 8000cd2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000cd4:	bf41      	itttt	mi
 8000cd6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000cd8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000cda:	f042 0204 	orrmi.w	r2, r2, #4
 8000cde:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	4216      	tst	r6, r2
 8000ce6:	d010      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	6819      	ldr	r1, [r3, #0]
 8000cec:	0709      	lsls	r1, r1, #28
 8000cee:	d50c      	bpl.n	8000d0a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000cf0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	0350      	lsls	r0, r2, #13
 8000cf6:	d535      	bpl.n	8000d64 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	0319      	lsls	r1, r3, #12
 8000cfc:	d401      	bmi.n	8000d02 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d00:	e000      	b.n	8000d04 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000d04:	b10b      	cbz	r3, 8000d0a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000d06:	4620      	mov	r0, r4
 8000d08:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d0a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	408a      	lsls	r2, r1
 8000d10:	4216      	tst	r6, r2
 8000d12:	d038      	beq.n	8000d86 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	06c6      	lsls	r6, r0, #27
 8000d1a:	d534      	bpl.n	8000d86 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d1c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d1e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000d22:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d24:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d26:	d125      	bne.n	8000d74 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d28:	f022 0216 	bic.w	r2, r2, #22
 8000d2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d34:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d38:	b90a      	cbnz	r2, 8000d3e <HAL_DMA_IRQHandler+0xc6>
 8000d3a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d3c:	b11a      	cbz	r2, 8000d46 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	f022 0208 	bic.w	r2, r2, #8
 8000d44:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d46:	233f      	movs	r3, #63	; 0x3f
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000d52:	2301      	movs	r3, #1
 8000d54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000d58:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000d5a:	b10b      	cbz	r3, 8000d60 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	4798      	blx	r3
}
 8000d60:	b003      	add	sp, #12
 8000d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d68:	bf5e      	ittt	pl
 8000d6a:	681a      	ldrpl	r2, [r3, #0]
 8000d6c:	f022 0208 	bicpl.w	r2, r2, #8
 8000d70:	601a      	strpl	r2, [r3, #0]
 8000d72:	e7c4      	b.n	8000cfe <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d74:	0350      	lsls	r0, r2, #13
 8000d76:	d528      	bpl.n	8000dca <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	0319      	lsls	r1, r3, #12
 8000d7c:	d432      	bmi.n	8000de4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000d7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000d80:	b10b      	cbz	r3, 8000d86 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000d82:	4620      	mov	r0, r4
 8000d84:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0e9      	beq.n	8000d60 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d8e:	07da      	lsls	r2, r3, #31
 8000d90:	d519      	bpl.n	8000dc6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d92:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000d94:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d96:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000da2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000da6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000daa:	9b01      	ldr	r3, [sp, #4]
 8000dac:	3301      	adds	r3, #1
 8000dae:	429f      	cmp	r7, r3
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	d302      	bcc.n	8000dba <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000db4:	6813      	ldr	r3, [r2, #0]
 8000db6:	07db      	lsls	r3, r3, #31
 8000db8:	d4f7      	bmi.n	8000daa <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000dc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000dc8:	e7c7      	b.n	8000d5a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000dd0:	d108      	bne.n	8000de4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000dd2:	6819      	ldr	r1, [r3, #0]
 8000dd4:	f021 0110 	bic.w	r1, r1, #16
 8000dd8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000dda:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000ddc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000de0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000de4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000de6:	e7cb      	b.n	8000d80 <HAL_DMA_IRQHandler+0x108>
 8000de8:	20000008 	.word	0x20000008

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000df0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000f98 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df8:	4a65      	ldr	r2, [pc, #404]	; (8000f90 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000f9c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e00:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e02:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e08:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e10:	45b6      	cmp	lr, r6
 8000e12:	f040 80aa 	bne.w	8000f6a <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e16:	684c      	ldr	r4, [r1, #4]
 8000e18:	f024 0710 	bic.w	r7, r4, #16
 8000e1c:	2f02      	cmp	r7, #2
 8000e1e:	d116      	bne.n	8000e4e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e24:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e28:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e30:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e34:	f04f 0c0f 	mov.w	ip, #15
 8000e38:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e3c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e40:	690d      	ldr	r5, [r1, #16]
 8000e42:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e46:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e4a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e4e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e52:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e54:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e58:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e5c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e62:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e66:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e70:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e72:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e76:	d811      	bhi.n	8000e9c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000e78:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e7a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	68cf      	ldr	r7, [r1, #12]
 8000e80:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000e84:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000e88:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e8a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e90:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000e94:	409f      	lsls	r7, r3
 8000e96:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000e9a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e9c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea0:	688f      	ldr	r7, [r1, #8]
 8000ea2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ea6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ea8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eaa:	00e5      	lsls	r5, r4, #3
 8000eac:	d55d      	bpl.n	8000f6a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	f04f 0b00 	mov.w	fp, #0
 8000eb2:	f8cd b00c 	str.w	fp, [sp, #12]
 8000eb6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eba:	4d36      	ldr	r5, [pc, #216]	; (8000f94 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ec0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ec4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ec8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ecc:	9703      	str	r7, [sp, #12]
 8000ece:	9f03      	ldr	r7, [sp, #12]
 8000ed0:	f023 0703 	bic.w	r7, r3, #3
 8000ed4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ed8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ee8:	f04f 0e0f 	mov.w	lr, #15
 8000eec:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	d03f      	beq.n	8000f78 <HAL_GPIO_Init+0x18c>
 8000ef8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000efc:	42a8      	cmp	r0, r5
 8000efe:	d03d      	beq.n	8000f7c <HAL_GPIO_Init+0x190>
 8000f00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f04:	42a8      	cmp	r0, r5
 8000f06:	d03b      	beq.n	8000f80 <HAL_GPIO_Init+0x194>
 8000f08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f0c:	42a8      	cmp	r0, r5
 8000f0e:	d039      	beq.n	8000f84 <HAL_GPIO_Init+0x198>
 8000f10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f14:	42a8      	cmp	r0, r5
 8000f16:	d037      	beq.n	8000f88 <HAL_GPIO_Init+0x19c>
 8000f18:	4548      	cmp	r0, r9
 8000f1a:	d037      	beq.n	8000f8c <HAL_GPIO_Init+0x1a0>
 8000f1c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f20:	42a8      	cmp	r0, r5
 8000f22:	bf14      	ite	ne
 8000f24:	2507      	movne	r5, #7
 8000f26:	2506      	moveq	r5, #6
 8000f28:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f2c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f30:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f32:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f36:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	bf0c      	ite	eq
 8000f3c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f3e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f40:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f42:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f44:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f48:	bf0c      	ite	eq
 8000f4a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f4c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f4e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f50:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f52:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f56:	bf0c      	ite	eq
 8000f58:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f5a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f5c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f5e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f60:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f62:	bf54      	ite	pl
 8000f64:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f66:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f68:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	2b10      	cmp	r3, #16
 8000f6e:	f47f af48 	bne.w	8000e02 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000f72:	b005      	add	sp, #20
 8000f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f78:	465d      	mov	r5, fp
 8000f7a:	e7d5      	b.n	8000f28 <HAL_GPIO_Init+0x13c>
 8000f7c:	2501      	movs	r5, #1
 8000f7e:	e7d3      	b.n	8000f28 <HAL_GPIO_Init+0x13c>
 8000f80:	2502      	movs	r5, #2
 8000f82:	e7d1      	b.n	8000f28 <HAL_GPIO_Init+0x13c>
 8000f84:	2503      	movs	r5, #3
 8000f86:	e7cf      	b.n	8000f28 <HAL_GPIO_Init+0x13c>
 8000f88:	2504      	movs	r5, #4
 8000f8a:	e7cd      	b.n	8000f28 <HAL_GPIO_Init+0x13c>
 8000f8c:	2505      	movs	r5, #5
 8000f8e:	e7cb      	b.n	8000f28 <HAL_GPIO_Init+0x13c>
 8000f90:	40013c00 	.word	0x40013c00
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	b10a      	cbz	r2, 8000fa6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa2:	6181      	str	r1, [r0, #24]
 8000fa4:	4770      	bx	lr
 8000fa6:	0409      	lsls	r1, r1, #16
 8000fa8:	e7fb      	b.n	8000fa2 <HAL_GPIO_WritePin+0x2>
	...

08000fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb0:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	b910      	cbnz	r0, 8000fbc <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fbc:	4b44      	ldr	r3, [pc, #272]	; (80010d0 <HAL_RCC_ClockConfig+0x124>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	f002 020f 	and.w	r2, r2, #15
 8000fc4:	428a      	cmp	r2, r1
 8000fc6:	d328      	bcc.n	800101a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc8:	6821      	ldr	r1, [r4, #0]
 8000fca:	078f      	lsls	r7, r1, #30
 8000fcc:	d42d      	bmi.n	800102a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fce:	07c8      	lsls	r0, r1, #31
 8000fd0:	d440      	bmi.n	8001054 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <HAL_RCC_ClockConfig+0x124>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	f002 020f 	and.w	r2, r2, #15
 8000fda:	4295      	cmp	r5, r2
 8000fdc:	d366      	bcc.n	80010ac <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fde:	6822      	ldr	r2, [r4, #0]
 8000fe0:	0751      	lsls	r1, r2, #29
 8000fe2:	d46c      	bmi.n	80010be <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fe4:	0713      	lsls	r3, r2, #28
 8000fe6:	d507      	bpl.n	8000ff8 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fe8:	4a3a      	ldr	r2, [pc, #232]	; (80010d4 <HAL_RCC_ClockConfig+0x128>)
 8000fea:	6921      	ldr	r1, [r4, #16]
 8000fec:	6893      	ldr	r3, [r2, #8]
 8000fee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ff2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ff6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ff8:	f000 f892 	bl	8001120 <HAL_RCC_GetSysClockFreq>
 8000ffc:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <HAL_RCC_ClockConfig+0x128>)
 8000ffe:	4a36      	ldr	r2, [pc, #216]	; (80010d8 <HAL_RCC_ClockConfig+0x12c>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	40d8      	lsrs	r0, r3
 800100a:	4b34      	ldr	r3, [pc, #208]	; (80010dc <HAL_RCC_ClockConfig+0x130>)
 800100c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fa80 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8001014:	2000      	movs	r0, #0
 8001016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	4299      	cmp	r1, r3
 8001026:	d1c6      	bne.n	8000fb6 <HAL_RCC_ClockConfig+0xa>
 8001028:	e7ce      	b.n	8000fc8 <HAL_RCC_ClockConfig+0x1c>
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800102c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001030:	bf1e      	ittt	ne
 8001032:	689a      	ldrne	r2, [r3, #8]
 8001034:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001038:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800103a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800103c:	bf42      	ittt	mi
 800103e:	689a      	ldrmi	r2, [r3, #8]
 8001040:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001044:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	68a0      	ldr	r0, [r4, #8]
 800104a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800104e:	4302      	orrs	r2, r0
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	e7bc      	b.n	8000fce <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001054:	6862      	ldr	r2, [r4, #4]
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_RCC_ClockConfig+0x128>)
 8001058:	2a01      	cmp	r2, #1
 800105a:	d11d      	bne.n	8001098 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001062:	d0a8      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001064:	4e1b      	ldr	r6, [pc, #108]	; (80010d4 <HAL_RCC_ClockConfig+0x128>)
 8001066:	68b3      	ldr	r3, [r6, #8]
 8001068:	f023 0303 	bic.w	r3, r3, #3
 800106c:	4313      	orrs	r3, r2
 800106e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001070:	f7ff fa9a 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001074:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001078:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800107a:	68b3      	ldr	r3, [r6, #8]
 800107c:	6862      	ldr	r2, [r4, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001086:	d0a4      	beq.n	8000fd2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001088:	f7ff fa8e 	bl	80005a8 <HAL_GetTick>
 800108c:	1bc0      	subs	r0, r0, r7
 800108e:	4540      	cmp	r0, r8
 8001090:	d9f3      	bls.n	800107a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001092:	2003      	movs	r0, #3
}
 8001094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001098:	1e91      	subs	r1, r2, #2
 800109a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800109e:	d802      	bhi.n	80010a6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010a4:	e7dd      	b.n	8001062 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a6:	f013 0f02 	tst.w	r3, #2
 80010aa:	e7da      	b.n	8001062 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ac:	b2ea      	uxtb	r2, r5
 80010ae:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	429d      	cmp	r5, r3
 80010b8:	f47f af7d 	bne.w	8000fb6 <HAL_RCC_ClockConfig+0xa>
 80010bc:	e78f      	b.n	8000fde <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010be:	4905      	ldr	r1, [pc, #20]	; (80010d4 <HAL_RCC_ClockConfig+0x128>)
 80010c0:	68e0      	ldr	r0, [r4, #12]
 80010c2:	688b      	ldr	r3, [r1, #8]
 80010c4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80010c8:	4303      	orrs	r3, r0
 80010ca:	608b      	str	r3, [r1, #8]
 80010cc:	e78a      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x38>
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00
 80010d4:	40023800 	.word	0x40023800
 80010d8:	08002bc4 	.word	0x08002bc4
 80010dc:	20000008 	.word	0x20000008

080010e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	4a03      	ldr	r2, [pc, #12]	; (80010fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80010ee:	6810      	ldr	r0, [r2, #0]
}
 80010f0:	40d8      	lsrs	r0, r3
 80010f2:	4770      	bx	lr
 80010f4:	40023800 	.word	0x40023800
 80010f8:	08002bd4 	.word	0x08002bd4
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800110a:	5cd3      	ldrb	r3, [r2, r3]
 800110c:	4a03      	ldr	r2, [pc, #12]	; (800111c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800110e:	6810      	ldr	r0, [r2, #0]
}
 8001110:	40d8      	lsrs	r0, r3
 8001112:	4770      	bx	lr
 8001114:	40023800 	.word	0x40023800
 8001118:	08002bd4 	.word	0x08002bd4
 800111c:	20000008 	.word	0x20000008

08001120 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001120:	4920      	ldr	r1, [pc, #128]	; (80011a4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001122:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001124:	688b      	ldr	r3, [r1, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b08      	cmp	r3, #8
 800112c:	d007      	beq.n	800113e <HAL_RCC_GetSysClockFreq+0x1e>
 800112e:	2b0c      	cmp	r3, #12
 8001130:	d020      	beq.n	8001174 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_RCC_GetSysClockFreq+0x88>)
 8001134:	481d      	ldr	r0, [pc, #116]	; (80011ac <HAL_RCC_GetSysClockFreq+0x8c>)
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf18      	it	ne
 800113a:	4610      	movne	r0, r2
 800113c:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800113e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001140:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001142:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001144:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001148:	bf14      	ite	ne
 800114a:	4818      	ldrne	r0, [pc, #96]	; (80011ac <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800114c:	4816      	ldreq	r0, [pc, #88]	; (80011a8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800114e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001152:	bf18      	it	ne
 8001154:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001156:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800115a:	fba1 0100 	umull	r0, r1, r1, r0
 800115e:	f7ff f851 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_RCC_GetSysClockFreq+0x84>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800116a:	3301      	adds	r3, #1
 800116c:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800116e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001172:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001174:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001176:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001178:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800117a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800117e:	bf14      	ite	ne
 8001180:	480a      	ldrne	r0, [pc, #40]	; (80011ac <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001182:	4809      	ldreq	r0, [pc, #36]	; (80011a8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001184:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001188:	bf18      	it	ne
 800118a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800118c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001190:	fba1 0100 	umull	r0, r1, r1, r0
 8001194:	f7ff f836 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_RCC_GetSysClockFreq+0x84>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80011a0:	e7e5      	b.n	800116e <HAL_RCC_GetSysClockFreq+0x4e>
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	00f42400 	.word	0x00f42400
 80011ac:	007a1200 	.word	0x007a1200

080011b0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b0:	6803      	ldr	r3, [r0, #0]
{
 80011b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	07df      	lsls	r7, r3, #31
{
 80011b8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ba:	d410      	bmi.n	80011de <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	079e      	lsls	r6, r3, #30
 80011c0:	d467      	bmi.n	8001292 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	071a      	lsls	r2, r3, #28
 80011c6:	f100 80b2 	bmi.w	800132e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	075b      	lsls	r3, r3, #29
 80011ce:	f100 80d0 	bmi.w	8001372 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d2:	69a2      	ldr	r2, [r4, #24]
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	f040 8139 	bne.w	800144c <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80011da:	2000      	movs	r0, #0
 80011dc:	e01e      	b.n	800121c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011de:	4b97      	ldr	r3, [pc, #604]	; (800143c <HAL_RCC_OscConfig+0x28c>)
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	f002 020c 	and.w	r2, r2, #12
 80011e6:	2a04      	cmp	r2, #4
 80011e8:	d010      	beq.n	800120c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011f0:	2a08      	cmp	r2, #8
 80011f2:	d102      	bne.n	80011fa <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	025d      	lsls	r5, r3, #9
 80011f8:	d408      	bmi.n	800120c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4b90      	ldr	r3, [pc, #576]	; (800143c <HAL_RCC_OscConfig+0x28c>)
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001202:	2a0c      	cmp	r2, #12
 8001204:	d10d      	bne.n	8001222 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	0250      	lsls	r0, r2, #9
 800120a:	d50a      	bpl.n	8001222 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	4b8b      	ldr	r3, [pc, #556]	; (800143c <HAL_RCC_OscConfig+0x28c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0399      	lsls	r1, r3, #14
 8001212:	d5d3      	bpl.n	80011bc <HAL_RCC_OscConfig+0xc>
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1d0      	bne.n	80011bc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800121a:	2001      	movs	r0, #1
}
 800121c:	b002      	add	sp, #8
 800121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001222:	6862      	ldr	r2, [r4, #4]
 8001224:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001228:	d111      	bne.n	800124e <HAL_RCC_OscConfig+0x9e>
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001230:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001232:	f7ff f9b9 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	4d81      	ldr	r5, [pc, #516]	; (800143c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001238:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	039a      	lsls	r2, r3, #14
 800123e:	d4bd      	bmi.n	80011bc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff f9b2 	bl	80005a8 <HAL_GetTick>
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	2864      	cmp	r0, #100	; 0x64
 8001248:	d9f7      	bls.n	800123a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800124a:	2003      	movs	r0, #3
 800124c:	e7e6      	b.n	800121c <HAL_RCC_OscConfig+0x6c>
 800124e:	4d7b      	ldr	r5, [pc, #492]	; (800143c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001250:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	d107      	bne.n	8001268 <HAL_RCC_OscConfig+0xb8>
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	602b      	str	r3, [r5, #0]
 800125e:	682b      	ldr	r3, [r5, #0]
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	602b      	str	r3, [r5, #0]
 8001266:	e7e4      	b.n	8001232 <HAL_RCC_OscConfig+0x82>
 8001268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126c:	602b      	str	r3, [r5, #0]
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001274:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001276:	2a00      	cmp	r2, #0
 8001278:	d1db      	bne.n	8001232 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800127a:	f7ff f995 	bl	80005a8 <HAL_GetTick>
 800127e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	039b      	lsls	r3, r3, #14
 8001284:	d59a      	bpl.n	80011bc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001286:	f7ff f98f 	bl	80005a8 <HAL_GetTick>
 800128a:	1b80      	subs	r0, r0, r6
 800128c:	2864      	cmp	r0, #100	; 0x64
 800128e:	d9f7      	bls.n	8001280 <HAL_RCC_OscConfig+0xd0>
 8001290:	e7db      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001292:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_RCC_OscConfig+0x28c>)
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	f012 0f0c 	tst.w	r2, #12
 800129a:	d010      	beq.n	80012be <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012a2:	2a08      	cmp	r2, #8
 80012a4:	d102      	bne.n	80012ac <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	025f      	lsls	r7, r3, #9
 80012aa:	d508      	bpl.n	80012be <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ac:	4a63      	ldr	r2, [pc, #396]	; (800143c <HAL_RCC_OscConfig+0x28c>)
 80012ae:	6893      	ldr	r3, [r2, #8]
 80012b0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	d111      	bne.n	80012dc <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b8:	6853      	ldr	r3, [r2, #4]
 80012ba:	025e      	lsls	r6, r3, #9
 80012bc:	d40e      	bmi.n	80012dc <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b5f      	ldr	r3, [pc, #380]	; (800143c <HAL_RCC_OscConfig+0x28c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	0795      	lsls	r5, r2, #30
 80012c4:	d502      	bpl.n	80012cc <HAL_RCC_OscConfig+0x11c>
 80012c6:	68e2      	ldr	r2, [r4, #12]
 80012c8:	2a01      	cmp	r2, #1
 80012ca:	d1a6      	bne.n	800121a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	6921      	ldr	r1, [r4, #16]
 80012d0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012d4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80012d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	e772      	b.n	80011c2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012dc:	68e2      	ldr	r2, [r4, #12]
 80012de:	4b58      	ldr	r3, [pc, #352]	; (8001440 <HAL_RCC_OscConfig+0x290>)
 80012e0:	b1b2      	cbz	r2, 8001310 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012e6:	f7ff f95f 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4d54      	ldr	r5, [pc, #336]	; (800143c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80012ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	0798      	lsls	r0, r3, #30
 80012f2:	d507      	bpl.n	8001304 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	6922      	ldr	r2, [r4, #16]
 80012f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001300:	602b      	str	r3, [r5, #0]
 8001302:	e75e      	b.n	80011c2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001304:	f7ff f950 	bl	80005a8 <HAL_GetTick>
 8001308:	1b80      	subs	r0, r0, r6
 800130a:	2802      	cmp	r0, #2
 800130c:	d9ef      	bls.n	80012ee <HAL_RCC_OscConfig+0x13e>
 800130e:	e79c      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001310:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001312:	f7ff f949 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	4d49      	ldr	r5, [pc, #292]	; (800143c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001318:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	0799      	lsls	r1, r3, #30
 800131e:	f57f af50 	bpl.w	80011c2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff f941 	bl	80005a8 <HAL_GetTick>
 8001326:	1b80      	subs	r0, r0, r6
 8001328:	2802      	cmp	r0, #2
 800132a:	d9f6      	bls.n	800131a <HAL_RCC_OscConfig+0x16a>
 800132c:	e78d      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800132e:	6962      	ldr	r2, [r4, #20]
 8001330:	4b44      	ldr	r3, [pc, #272]	; (8001444 <HAL_RCC_OscConfig+0x294>)
 8001332:	b17a      	cbz	r2, 8001354 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001338:	f7ff f936 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133c:	4d3f      	ldr	r5, [pc, #252]	; (800143c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800133e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001340:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001342:	079f      	lsls	r7, r3, #30
 8001344:	f53f af41 	bmi.w	80011ca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff f92e 	bl	80005a8 <HAL_GetTick>
 800134c:	1b80      	subs	r0, r0, r6
 800134e:	2802      	cmp	r0, #2
 8001350:	d9f6      	bls.n	8001340 <HAL_RCC_OscConfig+0x190>
 8001352:	e77a      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001354:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001356:	f7ff f927 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135a:	4d38      	ldr	r5, [pc, #224]	; (800143c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800135c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001360:	0798      	lsls	r0, r3, #30
 8001362:	f57f af32 	bpl.w	80011ca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff f91f 	bl	80005a8 <HAL_GetTick>
 800136a:	1b80      	subs	r0, r0, r6
 800136c:	2802      	cmp	r0, #2
 800136e:	d9f6      	bls.n	800135e <HAL_RCC_OscConfig+0x1ae>
 8001370:	e76b      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b32      	ldr	r3, [pc, #200]	; (800143c <HAL_RCC_OscConfig+0x28c>)
 8001374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001376:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800137a:	d128      	bne.n	80013ce <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001390:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001392:	4d2d      	ldr	r5, [pc, #180]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	05d9      	lsls	r1, r3, #23
 8001398:	d51b      	bpl.n	80013d2 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139a:	68a3      	ldr	r3, [r4, #8]
 800139c:	4d27      	ldr	r5, [pc, #156]	; (800143c <HAL_RCC_OscConfig+0x28c>)
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d127      	bne.n	80013f2 <HAL_RCC_OscConfig+0x242>
 80013a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013aa:	f7ff f8fd 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ae:	4d23      	ldr	r5, [pc, #140]	; (800143c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80013b0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013b8:	079b      	lsls	r3, r3, #30
 80013ba:	d539      	bpl.n	8001430 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80013bc:	2e00      	cmp	r6, #0
 80013be:	f43f af08 	beq.w	80011d2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c2:	4a1e      	ldr	r2, [pc, #120]	; (800143c <HAL_RCC_OscConfig+0x28c>)
 80013c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
 80013cc:	e701      	b.n	80011d2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	2600      	movs	r6, #0
 80013d0:	e7df      	b.n	8001392 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013da:	f7ff f8e5 	bl	80005a8 <HAL_GetTick>
 80013de:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	05da      	lsls	r2, r3, #23
 80013e4:	d4d9      	bmi.n	800139a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e6:	f7ff f8df 	bl	80005a8 <HAL_GetTick>
 80013ea:	1bc0      	subs	r0, r0, r7
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9f7      	bls.n	80013e0 <HAL_RCC_OscConfig+0x230>
 80013f0:	e72b      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d104      	bne.n	8001400 <HAL_RCC_OscConfig+0x250>
 80013f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	672b      	str	r3, [r5, #112]	; 0x70
 80013fe:	e7d0      	b.n	80013a2 <HAL_RCC_OscConfig+0x1f2>
 8001400:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	672a      	str	r2, [r5, #112]	; 0x70
 8001408:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800140a:	f022 0204 	bic.w	r2, r2, #4
 800140e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1ca      	bne.n	80013aa <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001414:	f7ff f8c8 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800141c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001420:	0798      	lsls	r0, r3, #30
 8001422:	d5cb      	bpl.n	80013bc <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff f8c0 	bl	80005a8 <HAL_GetTick>
 8001428:	1bc0      	subs	r0, r0, r7
 800142a:	4540      	cmp	r0, r8
 800142c:	d9f7      	bls.n	800141e <HAL_RCC_OscConfig+0x26e>
 800142e:	e70c      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff f8ba 	bl	80005a8 <HAL_GetTick>
 8001434:	1bc0      	subs	r0, r0, r7
 8001436:	4540      	cmp	r0, r8
 8001438:	d9bd      	bls.n	80013b6 <HAL_RCC_OscConfig+0x206>
 800143a:	e706      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
 800143c:	40023800 	.word	0x40023800
 8001440:	42470000 	.word	0x42470000
 8001444:	42470e80 	.word	0x42470e80
 8001448:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800144c:	4d23      	ldr	r5, [pc, #140]	; (80014dc <HAL_RCC_OscConfig+0x32c>)
 800144e:	68ab      	ldr	r3, [r5, #8]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b08      	cmp	r3, #8
 8001456:	f43f aee0 	beq.w	800121a <HAL_RCC_OscConfig+0x6a>
 800145a:	4e21      	ldr	r6, [pc, #132]	; (80014e0 <HAL_RCC_OscConfig+0x330>)
 800145c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001460:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001462:	d12d      	bne.n	80014c0 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001464:	f7ff f8a0 	bl	80005a8 <HAL_GetTick>
 8001468:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	0199      	lsls	r1, r3, #6
 800146e:	d421      	bmi.n	80014b4 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001470:	6a22      	ldr	r2, [r4, #32]
 8001472:	69e3      	ldr	r3, [r4, #28]
 8001474:	4313      	orrs	r3, r2
 8001476:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001478:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800147c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800147e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001482:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001484:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001488:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4c14      	ldr	r4, [pc, #80]	; (80014dc <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800148c:	0852      	lsrs	r2, r2, #1
 800148e:	3a01      	subs	r2, #1
 8001490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001494:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001496:	2301      	movs	r3, #1
 8001498:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800149a:	f7ff f885 	bl	80005a8 <HAL_GetTick>
 800149e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	019a      	lsls	r2, r3, #6
 80014a4:	f53f ae99 	bmi.w	80011da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff f87e 	bl	80005a8 <HAL_GetTick>
 80014ac:	1b40      	subs	r0, r0, r5
 80014ae:	2802      	cmp	r0, #2
 80014b0:	d9f6      	bls.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
 80014b2:	e6ca      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff f878 	bl	80005a8 <HAL_GetTick>
 80014b8:	1bc0      	subs	r0, r0, r7
 80014ba:	2802      	cmp	r0, #2
 80014bc:	d9d5      	bls.n	800146a <HAL_RCC_OscConfig+0x2ba>
 80014be:	e6c4      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80014c0:	f7ff f872 	bl	80005a8 <HAL_GetTick>
 80014c4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	019b      	lsls	r3, r3, #6
 80014ca:	f57f ae86 	bpl.w	80011da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff f86b 	bl	80005a8 <HAL_GetTick>
 80014d2:	1b00      	subs	r0, r0, r4
 80014d4:	2802      	cmp	r0, #2
 80014d6:	d9f6      	bls.n	80014c6 <HAL_RCC_OscConfig+0x316>
 80014d8:	e6b7      	b.n	800124a <HAL_RCC_OscConfig+0x9a>
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	42470060 	.word	0x42470060

080014e4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014e4:	6a03      	ldr	r3, [r0, #32]
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014ec:	6a03      	ldr	r3, [r0, #32]
{
 80014ee:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80014f2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80014f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80014fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80014fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80014fe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001502:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001504:	4d0e      	ldr	r5, [pc, #56]	; (8001540 <TIM_OC1_SetConfig+0x5c>)
 8001506:	42a8      	cmp	r0, r5
 8001508:	d002      	beq.n	8001510 <TIM_OC1_SetConfig+0x2c>
 800150a:	4e0e      	ldr	r6, [pc, #56]	; (8001544 <TIM_OC1_SetConfig+0x60>)
 800150c:	42b0      	cmp	r0, r6
 800150e:	d110      	bne.n	8001532 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001510:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001512:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001516:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001518:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800151a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800151e:	d002      	beq.n	8001526 <TIM_OC1_SetConfig+0x42>
 8001520:	4d08      	ldr	r5, [pc, #32]	; (8001544 <TIM_OC1_SetConfig+0x60>)
 8001522:	42a8      	cmp	r0, r5
 8001524:	d105      	bne.n	8001532 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001526:	694d      	ldr	r5, [r1, #20]
 8001528:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800152a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800152e:	4335      	orrs	r5, r6
 8001530:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001532:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001534:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001536:	684a      	ldr	r2, [r1, #4]
 8001538:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800153a:	6203      	str	r3, [r0, #32]
 800153c:	bd70      	pop	{r4, r5, r6, pc}
 800153e:	bf00      	nop
 8001540:	40010000 	.word	0x40010000
 8001544:	40010400 	.word	0x40010400

08001548 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001548:	6a03      	ldr	r3, [r0, #32]
 800154a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800154e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001550:	6a03      	ldr	r3, [r0, #32]
{
 8001552:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001554:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001556:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001558:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800155a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800155e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001560:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001562:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001566:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800156a:	4d11      	ldr	r5, [pc, #68]	; (80015b0 <TIM_OC3_SetConfig+0x68>)
 800156c:	42a8      	cmp	r0, r5
 800156e:	d003      	beq.n	8001578 <TIM_OC3_SetConfig+0x30>
 8001570:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001574:	42a8      	cmp	r0, r5
 8001576:	d114      	bne.n	80015a2 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001578:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800157a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800157e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001582:	4d0b      	ldr	r5, [pc, #44]	; (80015b0 <TIM_OC3_SetConfig+0x68>)
 8001584:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800158a:	d003      	beq.n	8001594 <TIM_OC3_SetConfig+0x4c>
 800158c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001590:	42a8      	cmp	r0, r5
 8001592:	d106      	bne.n	80015a2 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001594:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001596:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001598:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800159c:	4335      	orrs	r5, r6
 800159e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015a2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015a4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80015a6:	684a      	ldr	r2, [r1, #4]
 80015a8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015aa:	6203      	str	r3, [r0, #32]
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
 80015ae:	bf00      	nop
 80015b0:	40010000 	.word	0x40010000

080015b4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80015b4:	6a03      	ldr	r3, [r0, #32]
 80015b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015ba:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015bc:	6a03      	ldr	r3, [r0, #32]
{
 80015be:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80015c2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80015c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80015ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80015d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80015d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015d8:	4d08      	ldr	r5, [pc, #32]	; (80015fc <TIM_OC4_SetConfig+0x48>)
 80015da:	42a8      	cmp	r0, r5
 80015dc:	d003      	beq.n	80015e6 <TIM_OC4_SetConfig+0x32>
 80015de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015e2:	42a8      	cmp	r0, r5
 80015e4:	d104      	bne.n	80015f0 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015e6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80015e8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015ec:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015f0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015f2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80015f4:	684a      	ldr	r2, [r1, #4]
 80015f6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015f8:	6203      	str	r3, [r0, #32]
 80015fa:	bd30      	pop	{r4, r5, pc}
 80015fc:	40010000 	.word	0x40010000

08001600 <HAL_TIM_PWM_MspInit>:
 8001600:	4770      	bx	lr
	...

08001604 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001604:	4a30      	ldr	r2, [pc, #192]	; (80016c8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001606:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001608:	4290      	cmp	r0, r2
 800160a:	d012      	beq.n	8001632 <TIM_Base_SetConfig+0x2e>
 800160c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001610:	d00f      	beq.n	8001632 <TIM_Base_SetConfig+0x2e>
 8001612:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001616:	4290      	cmp	r0, r2
 8001618:	d00b      	beq.n	8001632 <TIM_Base_SetConfig+0x2e>
 800161a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800161e:	4290      	cmp	r0, r2
 8001620:	d007      	beq.n	8001632 <TIM_Base_SetConfig+0x2e>
 8001622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001626:	4290      	cmp	r0, r2
 8001628:	d003      	beq.n	8001632 <TIM_Base_SetConfig+0x2e>
 800162a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800162e:	4290      	cmp	r0, r2
 8001630:	d119      	bne.n	8001666 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8001632:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001638:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800163a:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <TIM_Base_SetConfig+0xc4>)
 800163c:	4290      	cmp	r0, r2
 800163e:	d029      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 8001640:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001644:	d026      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 8001646:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800164a:	4290      	cmp	r0, r2
 800164c:	d022      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 800164e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001652:	4290      	cmp	r0, r2
 8001654:	d01e      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 8001656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800165a:	4290      	cmp	r0, r2
 800165c:	d01a      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 800165e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001662:	4290      	cmp	r0, r2
 8001664:	d016      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <TIM_Base_SetConfig+0xc8>)
 8001668:	4290      	cmp	r0, r2
 800166a:	d013      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 800166c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001670:	4290      	cmp	r0, r2
 8001672:	d00f      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 8001674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001678:	4290      	cmp	r0, r2
 800167a:	d00b      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 800167c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001680:	4290      	cmp	r0, r2
 8001682:	d007      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 8001684:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001688:	4290      	cmp	r0, r2
 800168a:	d003      	beq.n	8001694 <TIM_Base_SetConfig+0x90>
 800168c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001690:	4290      	cmp	r0, r2
 8001692:	d103      	bne.n	800169c <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001694:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800169a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800169c:	694a      	ldr	r2, [r1, #20]
 800169e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016a2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016a6:	688b      	ldr	r3, [r1, #8]
 80016a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016aa:	680b      	ldr	r3, [r1, #0]
 80016ac:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <TIM_Base_SetConfig+0xc4>)
 80016b0:	4298      	cmp	r0, r3
 80016b2:	d003      	beq.n	80016bc <TIM_Base_SetConfig+0xb8>
 80016b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b8:	4298      	cmp	r0, r3
 80016ba:	d101      	bne.n	80016c0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80016bc:	690b      	ldr	r3, [r1, #16]
 80016be:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80016c0:	2301      	movs	r3, #1
 80016c2:	6143      	str	r3, [r0, #20]
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40014000 	.word	0x40014000

080016d0 <HAL_TIM_Base_Init>:
{
 80016d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80016d2:	4604      	mov	r4, r0
 80016d4:	b1a0      	cbz	r0, 8001700 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80016d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016de:	b91b      	cbnz	r3, 80016e8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016e4:	f001 f8ba 	bl	800285c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80016e8:	2302      	movs	r3, #2
 80016ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ee:	6820      	ldr	r0, [r4, #0]
 80016f0:	1d21      	adds	r1, r4, #4
 80016f2:	f7ff ff87 	bl	8001604 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016fc:	2000      	movs	r0, #0
 80016fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
}
 8001702:	bd10      	pop	{r4, pc}

08001704 <HAL_TIM_PWM_Init>:
{
 8001704:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001706:	4604      	mov	r4, r0
 8001708:	b1a0      	cbz	r0, 8001734 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800170a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800170e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001712:	b91b      	cbnz	r3, 800171c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001714:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001718:	f7ff ff72 	bl	8001600 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800171c:	2302      	movs	r3, #2
 800171e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001722:	6820      	ldr	r0, [r4, #0]
 8001724:	1d21      	adds	r1, r4, #4
 8001726:	f7ff ff6d 	bl	8001604 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800172a:	2301      	movs	r3, #1
 800172c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001730:	2000      	movs	r0, #0
 8001732:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001734:	2001      	movs	r0, #1
}
 8001736:	bd10      	pop	{r4, pc}

08001738 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001738:	6a03      	ldr	r3, [r0, #32]
 800173a:	f023 0310 	bic.w	r3, r3, #16
 800173e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001740:	6a03      	ldr	r3, [r0, #32]
{
 8001742:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001744:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001746:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001748:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800174a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800174e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001752:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001754:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001758:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800175c:	4d10      	ldr	r5, [pc, #64]	; (80017a0 <TIM_OC2_SetConfig+0x68>)
 800175e:	42a8      	cmp	r0, r5
 8001760:	d003      	beq.n	800176a <TIM_OC2_SetConfig+0x32>
 8001762:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001766:	42a8      	cmp	r0, r5
 8001768:	d114      	bne.n	8001794 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800176a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800176c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001770:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001774:	4d0a      	ldr	r5, [pc, #40]	; (80017a0 <TIM_OC2_SetConfig+0x68>)
 8001776:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800177c:	d003      	beq.n	8001786 <TIM_OC2_SetConfig+0x4e>
 800177e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001782:	42a8      	cmp	r0, r5
 8001784:	d106      	bne.n	8001794 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001786:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001788:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800178a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800178e:	4335      	orrs	r5, r6
 8001790:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001794:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001796:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001798:	684a      	ldr	r2, [r1, #4]
 800179a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800179c:	6203      	str	r3, [r0, #32]
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	40010000 	.word	0x40010000

080017a4 <HAL_TIM_PWM_ConfigChannel>:
{
 80017a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80017a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017aa:	2b01      	cmp	r3, #1
{
 80017ac:	4604      	mov	r4, r0
 80017ae:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80017b2:	d025      	beq.n	8001800 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80017b4:	2301      	movs	r3, #1
 80017b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80017ba:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80017be:	2a0c      	cmp	r2, #12
 80017c0:	d818      	bhi.n	80017f4 <HAL_TIM_PWM_ConfigChannel+0x50>
 80017c2:	e8df f002 	tbb	[pc, r2]
 80017c6:	1707      	.short	0x1707
 80017c8:	171e1717 	.word	0x171e1717
 80017cc:	172f1717 	.word	0x172f1717
 80017d0:	1717      	.short	0x1717
 80017d2:	40          	.byte	0x40
 80017d3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017d4:	6820      	ldr	r0, [r4, #0]
 80017d6:	f7ff fe85 	bl	80014e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017dc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017de:	699a      	ldr	r2, [r3, #24]
 80017e0:	f042 0208 	orr.w	r2, r2, #8
 80017e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80017e6:	699a      	ldr	r2, [r3, #24]
 80017e8:	f022 0204 	bic.w	r2, r2, #4
 80017ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017ee:	699a      	ldr	r2, [r3, #24]
 80017f0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017f2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80017f4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80017f6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80017f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80017fc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001800:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001802:	6820      	ldr	r0, [r4, #0]
 8001804:	f7ff ff98 	bl	8001738 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001808:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800180a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001822:	e7e6      	b.n	80017f2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001824:	6820      	ldr	r0, [r4, #0]
 8001826:	f7ff fe8f 	bl	8001548 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800182a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800182c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	f042 0208 	orr.w	r2, r2, #8
 8001834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	f022 0204 	bic.w	r2, r2, #4
 800183c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001842:	61da      	str	r2, [r3, #28]
      break;
 8001844:	e7d6      	b.n	80017f4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001846:	6820      	ldr	r0, [r4, #0]
 8001848:	f7ff feb4 	bl	80015b4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800184c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800184e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001856:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001866:	e7ec      	b.n	8001842 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001868:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800186a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800186c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800186e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001872:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001876:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001878:	6083      	str	r3, [r0, #8]
 800187a:	bd10      	pop	{r4, pc}

0800187c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800187c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001880:	2b01      	cmp	r3, #1
{
 8001882:	b570      	push	{r4, r5, r6, lr}
 8001884:	4604      	mov	r4, r0
 8001886:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800188a:	d019      	beq.n	80018c0 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 800188c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001890:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001892:	2301      	movs	r3, #1
 8001894:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001898:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800189a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800189e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80018a2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80018a4:	680b      	ldr	r3, [r1, #0]
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d065      	beq.n	8001976 <HAL_TIM_ConfigClockSource+0xfa>
 80018aa:	d815      	bhi.n	80018d8 <HAL_TIM_ConfigClockSource+0x5c>
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d00c      	beq.n	80018ca <HAL_TIM_ConfigClockSource+0x4e>
 80018b0:	d807      	bhi.n	80018c2 <HAL_TIM_ConfigClockSource+0x46>
 80018b2:	b153      	cbz	r3, 80018ca <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80018b4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80018b6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80018b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80018bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d001      	beq.n	80018ca <HAL_TIM_ConfigClockSource+0x4e>
 80018c6:	2b30      	cmp	r3, #48	; 0x30
 80018c8:	d1f4      	bne.n	80018b4 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80018ca:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018cc:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80018d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018d4:	4313      	orrs	r3, r2
 80018d6:	e01a      	b.n	800190e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80018d8:	2b60      	cmp	r3, #96	; 0x60
 80018da:	d034      	beq.n	8001946 <HAL_TIM_ConfigClockSource+0xca>
 80018dc:	d819      	bhi.n	8001912 <HAL_TIM_ConfigClockSource+0x96>
 80018de:	2b50      	cmp	r3, #80	; 0x50
 80018e0:	d1e8      	bne.n	80018b4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018e2:	684a      	ldr	r2, [r1, #4]
 80018e4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80018e6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018e8:	6a05      	ldr	r5, [r0, #32]
 80018ea:	f025 0501 	bic.w	r5, r5, #1
 80018ee:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018f0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018f2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018fa:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80018fe:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001900:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001902:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001904:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800190a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800190e:	6083      	str	r3, [r0, #8]
 8001910:	e7d0      	b.n	80018b4 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001912:	2b70      	cmp	r3, #112	; 0x70
 8001914:	d00c      	beq.n	8001930 <HAL_TIM_ConfigClockSource+0xb4>
 8001916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191a:	d1cb      	bne.n	80018b4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800191c:	68cb      	ldr	r3, [r1, #12]
 800191e:	684a      	ldr	r2, [r1, #4]
 8001920:	6889      	ldr	r1, [r1, #8]
 8001922:	f7ff ffa1 	bl	8001868 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	6893      	ldr	r3, [r2, #8]
 800192a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192e:	e008      	b.n	8001942 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001930:	68cb      	ldr	r3, [r1, #12]
 8001932:	684a      	ldr	r2, [r1, #4]
 8001934:	6889      	ldr	r1, [r1, #8]
 8001936:	f7ff ff97 	bl	8001868 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800193a:	6822      	ldr	r2, [r4, #0]
 800193c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800193e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001942:	6093      	str	r3, [r2, #8]
      break;
 8001944:	e7b6      	b.n	80018b4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001946:	684d      	ldr	r5, [r1, #4]
 8001948:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800194a:	6a01      	ldr	r1, [r0, #32]
 800194c:	f021 0110 	bic.w	r1, r1, #16
 8001950:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001952:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001954:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001956:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800195a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800195e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001962:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001966:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001968:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800196a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800196c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001970:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001974:	e7cb      	b.n	800190e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001976:	684a      	ldr	r2, [r1, #4]
 8001978:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800197a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800197c:	6a05      	ldr	r5, [r0, #32]
 800197e:	f025 0501 	bic.w	r5, r5, #1
 8001982:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001984:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001986:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800198a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800198e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001992:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001994:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001996:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001998:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800199a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800199e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80019a2:	e7b4      	b.n	800190e <HAL_TIM_ConfigClockSource+0x92>

080019a4 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019a4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80019a6:	f001 011f 	and.w	r1, r1, #31
{
 80019aa:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80019ac:	2401      	movs	r4, #1
 80019ae:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80019b0:	ea23 0304 	bic.w	r3, r3, r4
 80019b4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80019b6:	6a03      	ldr	r3, [r0, #32]
 80019b8:	408a      	lsls	r2, r1
 80019ba:	431a      	orrs	r2, r3
 80019bc:	6202      	str	r2, [r0, #32]
 80019be:	bd10      	pop	{r4, pc}

080019c0 <HAL_TIM_PWM_Start>:
{
 80019c0:	b510      	push	{r4, lr}
 80019c2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019c4:	2201      	movs	r2, #1
 80019c6:	6800      	ldr	r0, [r0, #0]
 80019c8:	f7ff ffec 	bl	80019a4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_TIM_PWM_Start+0x3c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00e      	beq.n	80019f2 <HAL_TIM_PWM_Start+0x32>
 80019d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00a      	beq.n	80019f2 <HAL_TIM_PWM_Start+0x32>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e2:	2a06      	cmp	r2, #6
 80019e4:	d003      	beq.n	80019ee <HAL_TIM_PWM_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
}
 80019ee:	2000      	movs	r0, #0
 80019f0:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80019f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
 80019fa:	e7ef      	b.n	80019dc <HAL_TIM_PWM_Start+0x1c>
 80019fc:	40010000 	.word	0x40010000

08001a00 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a04:	2b01      	cmp	r3, #1
{
 8001a06:	b530      	push	{r4, r5, lr}
 8001a08:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001a0c:	d014      	beq.n	8001a38 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a0e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001a10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001a14:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a16:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a18:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a1a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a24:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a26:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a28:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a2a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a32:	2300      	movs	r3, #0
 8001a34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001a38:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001a3a:	bd30      	pop	{r4, r5, pc}

08001a3c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d01f      	beq.n	8001a84 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001a44:	68cb      	ldr	r3, [r1, #12]
 8001a46:	688a      	ldr	r2, [r1, #8]
 8001a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001a4e:	684a      	ldr	r2, [r1, #4]
 8001a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001a56:	680a      	ldr	r2, [r1, #0]
 8001a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a5c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001a5e:	690a      	ldr	r2, [r1, #16]
 8001a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a64:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001a66:	694a      	ldr	r2, [r1, #20]
 8001a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a6c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001a6e:	69ca      	ldr	r2, [r1, #28]
 8001a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a74:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001a76:	6802      	ldr	r2, [r0, #0]
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001a80:	4618      	mov	r0, r3
 8001a82:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001a84:	2002      	movs	r0, #2
}
 8001a86:	4770      	bx	lr

08001a88 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a88:	6803      	ldr	r3, [r0, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001aa0:	4770      	bx	lr
	...

08001aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001aa8:	6806      	ldr	r6, [r0, #0]
 8001aaa:	68c2      	ldr	r2, [r0, #12]
 8001aac:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001aae:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ab0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	6133      	str	r3, [r6, #16]
{
 8001ab8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001aba:	6883      	ldr	r3, [r0, #8]
 8001abc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001abe:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001ac4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001aca:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ace:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ad4:	6973      	ldr	r3, [r6, #20]
 8001ad6:	69a2      	ldr	r2, [r4, #24]
 8001ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001adc:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ade:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ae2:	6173      	str	r3, [r6, #20]
 8001ae4:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae6:	d17c      	bne.n	8001be2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ae8:	429e      	cmp	r6, r3
 8001aea:	d003      	beq.n	8001af4 <UART_SetConfig+0x50>
 8001aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001af0:	429e      	cmp	r6, r3
 8001af2:	d144      	bne.n	8001b7e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001af4:	f7ff fb04 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
 8001af8:	2519      	movs	r5, #25
 8001afa:	fb05 f300 	mul.w	r3, r5, r0
 8001afe:	6860      	ldr	r0, [r4, #4]
 8001b00:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b04:	0040      	lsls	r0, r0, #1
 8001b06:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b0a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b12:	f7ff faf5 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
 8001b16:	6863      	ldr	r3, [r4, #4]
 8001b18:	4368      	muls	r0, r5
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001b20:	f7ff faee 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
 8001b24:	6863      	ldr	r3, [r4, #4]
 8001b26:	4368      	muls	r0, r5
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b32:	fb09 7313 	mls	r3, r9, r3, r7
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	3332      	adds	r3, #50	; 0x32
 8001b3a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001b44:	f7ff fadc 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
 8001b48:	6862      	ldr	r2, [r4, #4]
 8001b4a:	4368      	muls	r0, r5
 8001b4c:	0052      	lsls	r2, r2, #1
 8001b4e:	fbb0 faf2 	udiv	sl, r0, r2
 8001b52:	f7ff fad5 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b56:	6863      	ldr	r3, [r4, #4]
 8001b58:	4368      	muls	r0, r5
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b60:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b64:	fb09 a313 	mls	r3, r9, r3, sl
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	3332      	adds	r3, #50	; 0x32
 8001b6c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b76:	443b      	add	r3, r7
 8001b78:	60b3      	str	r3, [r6, #8]
 8001b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b7e:	f7ff faaf 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001b82:	2519      	movs	r5, #25
 8001b84:	fb05 f300 	mul.w	r3, r5, r0
 8001b88:	6860      	ldr	r0, [r4, #4]
 8001b8a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b8e:	0040      	lsls	r0, r0, #1
 8001b90:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b94:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b9c:	f7ff faa0 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	6863      	ldr	r3, [r4, #4]
 8001ba2:	4368      	muls	r0, r5
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fbb0 f7f3 	udiv	r7, r0, r3
 8001baa:	f7ff fa99 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001bae:	6863      	ldr	r3, [r4, #4]
 8001bb0:	4368      	muls	r0, r5
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bbc:	fb09 7313 	mls	r3, r9, r3, r7
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	3332      	adds	r3, #50	; 0x32
 8001bc4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001bce:	f7ff fa87 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001bd2:	6862      	ldr	r2, [r4, #4]
 8001bd4:	4368      	muls	r0, r5
 8001bd6:	0052      	lsls	r2, r2, #1
 8001bd8:	fbb0 faf2 	udiv	sl, r0, r2
 8001bdc:	f7ff fa80 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001be0:	e7b9      	b.n	8001b56 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001be2:	429e      	cmp	r6, r3
 8001be4:	d002      	beq.n	8001bec <UART_SetConfig+0x148>
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <UART_SetConfig+0x230>)
 8001be8:	429e      	cmp	r6, r3
 8001bea:	d140      	bne.n	8001c6e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bec:	f7ff fa88 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
 8001bf0:	6867      	ldr	r7, [r4, #4]
 8001bf2:	2519      	movs	r5, #25
 8001bf4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bf8:	fb05 f300 	mul.w	r3, r5, r0
 8001bfc:	00bf      	lsls	r7, r7, #2
 8001bfe:	fbb3 f3f7 	udiv	r3, r3, r7
 8001c02:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c06:	011f      	lsls	r7, r3, #4
 8001c08:	f7ff fa7a 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
 8001c0c:	6863      	ldr	r3, [r4, #4]
 8001c0e:	4368      	muls	r0, r5
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c16:	f7ff fa73 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
 8001c1a:	6863      	ldr	r3, [r4, #4]
 8001c1c:	4368      	muls	r0, r5
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c24:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c28:	fb09 8313 	mls	r3, r9, r3, r8
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	3332      	adds	r3, #50	; 0x32
 8001c30:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c34:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001c38:	f7ff fa62 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
 8001c3c:	6862      	ldr	r2, [r4, #4]
 8001c3e:	4368      	muls	r0, r5
 8001c40:	0092      	lsls	r2, r2, #2
 8001c42:	fbb0 faf2 	udiv	sl, r0, r2
 8001c46:	f7ff fa5b 	bl	8001100 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c4a:	6863      	ldr	r3, [r4, #4]
 8001c4c:	4368      	muls	r0, r5
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c54:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c58:	fb09 a313 	mls	r3, r9, r3, sl
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	3332      	adds	r3, #50	; 0x32
 8001c60:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	ea43 0308 	orr.w	r3, r3, r8
 8001c6c:	e783      	b.n	8001b76 <UART_SetConfig+0xd2>
 8001c6e:	f7ff fa37 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001c72:	6867      	ldr	r7, [r4, #4]
 8001c74:	2519      	movs	r5, #25
 8001c76:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c7a:	fb05 f300 	mul.w	r3, r5, r0
 8001c7e:	00bf      	lsls	r7, r7, #2
 8001c80:	fbb3 f3f7 	udiv	r3, r3, r7
 8001c84:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c88:	011f      	lsls	r7, r3, #4
 8001c8a:	f7ff fa29 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001c8e:	6863      	ldr	r3, [r4, #4]
 8001c90:	4368      	muls	r0, r5
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c98:	f7ff fa22 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001c9c:	6863      	ldr	r3, [r4, #4]
 8001c9e:	4368      	muls	r0, r5
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001caa:	fb09 8313 	mls	r3, r9, r3, r8
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	3332      	adds	r3, #50	; 0x32
 8001cb2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cb6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001cba:	f7ff fa11 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001cbe:	6862      	ldr	r2, [r4, #4]
 8001cc0:	4368      	muls	r0, r5
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	fbb0 faf2 	udiv	sl, r0, r2
 8001cc8:	f7ff fa0a 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001ccc:	e7bd      	b.n	8001c4a <UART_SetConfig+0x1a6>
 8001cce:	bf00      	nop
 8001cd0:	40011000 	.word	0x40011000
 8001cd4:	40011400 	.word	0x40011400

08001cd8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460e      	mov	r6, r1
 8001cde:	4617      	mov	r7, r2
 8001ce0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ce2:	6821      	ldr	r1, [r4, #0]
 8001ce4:	680b      	ldr	r3, [r1, #0]
 8001ce6:	ea36 0303 	bics.w	r3, r6, r3
 8001cea:	d101      	bne.n	8001cf0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001cec:	2000      	movs	r0, #0
}
 8001cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001cf0:	1c6b      	adds	r3, r5, #1
 8001cf2:	d0f7      	beq.n	8001ce4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cf4:	b995      	cbnz	r5, 8001d1c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d0e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001d12:	2300      	movs	r3, #0
 8001d14:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001d18:	2003      	movs	r0, #3
 8001d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d1c:	f7fe fc44 	bl	80005a8 <HAL_GetTick>
 8001d20:	1bc0      	subs	r0, r0, r7
 8001d22:	4285      	cmp	r5, r0
 8001d24:	d2dd      	bcs.n	8001ce2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001d26:	e7e6      	b.n	8001cf6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001d28 <HAL_UART_Init>:
{
 8001d28:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	b340      	cbz	r0, 8001d80 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d2e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d36:	b91b      	cbnz	r3, 8001d40 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d38:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d3c:	f000 fe4c 	bl	80029d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001d40:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d42:	2324      	movs	r3, #36	; 0x24
 8001d44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d48:	68d3      	ldr	r3, [r2, #12]
 8001d4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d4e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d50:	4620      	mov	r0, r4
 8001d52:	f7ff fea7 	bl	8001aa4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d66:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d6e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d70:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d72:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d74:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d7a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001d7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
}
 8001d82:	bd10      	pop	{r4, pc}

08001d84 <HAL_UART_Transmit>:
{
 8001d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d88:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d8e:	2b20      	cmp	r3, #32
{
 8001d90:	4604      	mov	r4, r0
 8001d92:	460d      	mov	r5, r1
 8001d94:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d96:	d14f      	bne.n	8001e38 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001d98:	2900      	cmp	r1, #0
 8001d9a:	d04a      	beq.n	8001e32 <HAL_UART_Transmit+0xae>
 8001d9c:	2a00      	cmp	r2, #0
 8001d9e:	d048      	beq.n	8001e32 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001da0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d047      	beq.n	8001e38 <HAL_UART_Transmit+0xb4>
 8001da8:	2301      	movs	r3, #1
 8001daa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001db2:	2321      	movs	r3, #33	; 0x21
 8001db4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001db8:	f7fe fbf6 	bl	80005a8 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001dbc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001dc0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001dc2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dc6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b96b      	cbnz	r3, 8001de8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4632      	mov	r2, r6
 8001dd0:	2140      	movs	r1, #64	; 0x40
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f7ff ff80 	bl	8001cd8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001dd8:	b9b0      	cbnz	r0, 8001e08 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001de0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001de8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001df0:	68a3      	ldr	r3, [r4, #8]
 8001df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001df6:	4632      	mov	r2, r6
 8001df8:	463b      	mov	r3, r7
 8001dfa:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001dfe:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e00:	d10e      	bne.n	8001e20 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e02:	f7ff ff69 	bl	8001cd8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001e06:	b110      	cbz	r0, 8001e0e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001e08:	2003      	movs	r0, #3
 8001e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e0e:	882b      	ldrh	r3, [r5, #0]
 8001e10:	6822      	ldr	r2, [r4, #0]
 8001e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e16:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e18:	6923      	ldr	r3, [r4, #16]
 8001e1a:	b943      	cbnz	r3, 8001e2e <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8001e1c:	3502      	adds	r5, #2
 8001e1e:	e7d2      	b.n	8001dc6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e20:	f7ff ff5a 	bl	8001cd8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d1ef      	bne.n	8001e08 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	782a      	ldrb	r2, [r5, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	3501      	adds	r5, #1
 8001e30:	e7c9      	b.n	8001dc6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
 8001e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001e38:	2002      	movs	r0, #2
}
 8001e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001e40 <HAL_UART_Receive_DMA>:
{
 8001e40:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e42:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8001e46:	2a20      	cmp	r2, #32
{
 8001e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e4a:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e4c:	d138      	bne.n	8001ec0 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 8001e4e:	2900      	cmp	r1, #0
 8001e50:	d034      	beq.n	8001ebc <HAL_UART_Receive_DMA+0x7c>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d032      	beq.n	8001ebc <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8001e56:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8001e5a:	2a01      	cmp	r2, #1
 8001e5c:	d030      	beq.n	8001ec0 <HAL_UART_Receive_DMA+0x80>
 8001e5e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e60:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8001e62:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e66:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e68:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 8001e6a:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001e6c:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e6e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001e72:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001e74:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <HAL_UART_Receive_DMA+0x84>)
 8001e76:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001e78:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001e7a:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <HAL_UART_Receive_DMA+0x88>)
 8001e7c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_UART_Receive_DMA+0x8c>)
 8001e80:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8001e82:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001e84:	460a      	mov	r2, r1
 8001e86:	1d31      	adds	r1, r6, #4
 8001e88:	f7fe feb8 	bl	8000bfc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	9401      	str	r4, [sp, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	9201      	str	r2, [sp, #4]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	9201      	str	r2, [sp, #4]
 8001e98:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e9a:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8001e9c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea4:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb4:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8001eb6:	4620      	mov	r0, r4
}
 8001eb8:	b002      	add	sp, #8
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	e7fb      	b.n	8001eb8 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	e7f9      	b.n	8001eb8 <HAL_UART_Receive_DMA+0x78>
 8001ec4:	08001ed1 	.word	0x08001ed1
 8001ec8:	08001f0b 	.word	0x08001f0b
 8001ecc:	08001f17 	.word	0x08001f17

08001ed0 <UART_DMAReceiveCplt>:
{
 8001ed0:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001ed2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ed4:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001edc:	d110      	bne.n	8001f00 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8001ede:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	68d9      	ldr	r1, [r3, #12]
 8001ee4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001ee8:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eea:	6959      	ldr	r1, [r3, #20]
 8001eec:	f021 0101 	bic.w	r1, r1, #1
 8001ef0:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ef2:	6959      	ldr	r1, [r3, #20]
 8001ef4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001ef8:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001efa:	2320      	movs	r3, #32
 8001efc:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001f00:	4610      	mov	r0, r2
 8001f02:	f000 fafd 	bl	8002500 <HAL_UART_RxCpltCallback>
 8001f06:	bd08      	pop	{r3, pc}

08001f08 <HAL_UART_RxHalfCpltCallback>:
 8001f08:	4770      	bx	lr

08001f0a <UART_DMARxHalfCplt>:
{
 8001f0a:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8001f0c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f0e:	f7ff fffb 	bl	8001f08 <HAL_UART_RxHalfCpltCallback>
 8001f12:	bd08      	pop	{r3, pc}

08001f14 <HAL_UART_ErrorCallback>:
 8001f14:	4770      	bx	lr

08001f16 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f16:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8001f18:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001f1a:	680b      	ldr	r3, [r1, #0]
 8001f1c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001f1e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8001f22:	2821      	cmp	r0, #33	; 0x21
 8001f24:	d10a      	bne.n	8001f3c <UART_DMAError+0x26>
 8001f26:	0612      	lsls	r2, r2, #24
 8001f28:	d508      	bpl.n	8001f3c <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f34:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f36:	2220      	movs	r2, #32
 8001f38:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f3c:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001f3e:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8001f42:	2a22      	cmp	r2, #34	; 0x22
 8001f44:	d106      	bne.n	8001f54 <UART_DMAError+0x3e>
 8001f46:	065b      	lsls	r3, r3, #25
 8001f48:	d504      	bpl.n	8001f54 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001f4e:	4608      	mov	r0, r1
 8001f50:	f7ff fd9a 	bl	8001a88 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f54:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001f56:	f043 0310 	orr.w	r3, r3, #16
 8001f5a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	f7ff ffd9 	bl	8001f14 <HAL_UART_ErrorCallback>
 8001f62:	bd08      	pop	{r3, pc}

08001f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f64:	b530      	push	{r4, r5, lr}
 8001f66:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f68:	2234      	movs	r2, #52	; 0x34
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	a807      	add	r0, sp, #28
 8001f6e:	f000 fe11 	bl	8002b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f72:	2100      	movs	r1, #0
 8001f74:	2214      	movs	r2, #20
 8001f76:	a802      	add	r0, sp, #8
 8001f78:	f000 fe0c 	bl	8002b94 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	2500      	movs	r5, #0
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <SystemClock_Config+0x8c>)
 8001f80:	9500      	str	r5, [sp, #0]
 8001f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f96:	9501      	str	r5, [sp, #4]
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fa6:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001fb8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fba:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fbe:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fc0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc2:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fc8:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fca:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fcc:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fce:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd0:	f7ff f8ee 	bl	80011b0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fd8:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fde:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe2:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fe4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe6:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fe8:	f7fe ffe0 	bl	8000fac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001fec:	b015      	add	sp, #84	; 0x54
 8001fee:	bd30      	pop	{r4, r5, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <main>:
{
 8001ff8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001ffc:	b09f      	sub	sp, #124	; 0x7c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffe:	2400      	movs	r4, #0
 8002000:	4db8      	ldr	r5, [pc, #736]	; (80022e4 <main+0x2ec>)
  hadc1.Instance = ADC1;
 8002002:	4eb9      	ldr	r6, [pc, #740]	; (80022e8 <main+0x2f0>)
  HAL_Init();
 8002004:	f7fe faaa 	bl	800055c <HAL_Init>
  SystemClock_Config();
 8002008:	f7ff ffac 	bl	8001f64 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	2214      	movs	r2, #20
 800200e:	2100      	movs	r1, #0
 8002010:	a816      	add	r0, sp, #88	; 0x58
 8002012:	f000 fdbf 	bl	8002b94 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	9404      	str	r4, [sp, #16]
 8002018:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Digital_25_Pin|Digital_26_Pin|Digital_1_Pin|Digital_2_Pin 
 800201a:	48b4      	ldr	r0, [pc, #720]	; (80022ec <main+0x2f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	632b      	str	r3, [r5, #48]	; 0x30
 8002022:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	9304      	str	r3, [sp, #16]
 800202a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800202c:	9405      	str	r4, [sp, #20]
 800202e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	632b      	str	r3, [r5, #48]	; 0x30
 8002036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	9305      	str	r3, [sp, #20]
 800203e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	9406      	str	r4, [sp, #24]
 8002042:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	632b      	str	r3, [r5, #48]	; 0x30
 800204a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	9306      	str	r3, [sp, #24]
 8002052:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	9407      	str	r4, [sp, #28]
 8002056:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	632b      	str	r3, [r5, #48]	; 0x30
 800205e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	9307      	str	r3, [sp, #28]
 8002066:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002068:	9408      	str	r4, [sp, #32]
 800206a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	632b      	str	r3, [r5, #48]	; 0x30
 8002072:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, Digital_25_Pin|Digital_26_Pin|Digital_1_Pin|Digital_2_Pin 
 800207a:	4622      	mov	r2, r4
 800207c:	f641 71fc 	movw	r1, #8188	; 0x1ffc
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002080:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, Digital_25_Pin|Digital_26_Pin|Digital_1_Pin|Digital_2_Pin 
 8002082:	f7fe ff8d 	bl	8000fa0 <HAL_GPIO_WritePin>
                          |Digital_11_Pin|Digital_12_Pin|Digital_12C8_Pin|Digital_13_Pin 
                          |Digital_16_Pin|Digital_17_Pin|Digital_18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Digital_0_Pin|Digital_14_Pin|Digital_15_Pin, GPIO_PIN_RESET);
 8002086:	4622      	mov	r2, r4
 8002088:	f249 0180 	movw	r1, #36992	; 0x9080
 800208c:	4898      	ldr	r0, [pc, #608]	; (80022f0 <main+0x2f8>)
 800208e:	f7fe ff87 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Digital_4_Pin|Digital_5_Pin|Digital_6_Pin|Digital_7_Pin 
 8002092:	4622      	mov	r2, r4
 8002094:	f24f 51f6 	movw	r1, #62966	; 0xf5f6
 8002098:	4896      	ldr	r0, [pc, #600]	; (80022f4 <main+0x2fc>)
 800209a:	f7fe ff81 	bl	8000fa0 <HAL_GPIO_WritePin>
                          |Digital_8_Pin|Digital_9_Pin|Digital_10_Pin|Digital_20_Pin 
                          |Digital_21_Pin|Digital_22_Pin|Digital_23_Pin|Digital_24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Digital_19_GPIO_Port, Digital_19_Pin, GPIO_PIN_RESET);
 800209e:	4622      	mov	r2, r4
 80020a0:	2104      	movs	r1, #4
 80020a2:	4895      	ldr	r0, [pc, #596]	; (80022f8 <main+0x300>)
 80020a4:	f7fe ff7c 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020a8:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ac:	4b93      	ldr	r3, [pc, #588]	; (80022fc <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020ae:	488f      	ldr	r0, [pc, #572]	; (80022ec <main+0x2f4>)
  GPIO_InitStruct.Pin = B1_Pin;
 80020b0:	9716      	str	r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020b2:	a916      	add	r1, sp, #88	; 0x58
                           Digital_11_Pin Digital_12_Pin Digital_12C8_Pin Digital_13_Pin 
                           Digital_16_Pin Digital_17_Pin Digital_18_Pin */
  GPIO_InitStruct.Pin = Digital_25_Pin|Digital_26_Pin|Digital_1_Pin|Digital_2_Pin 
                          |Digital_11_Pin|Digital_12_Pin|Digital_12C8_Pin|Digital_13_Pin 
                          |Digital_16_Pin|Digital_17_Pin|Digital_18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020b8:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f7fe fe96 	bl	8000dec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Digital_25_Pin|Digital_26_Pin|Digital_1_Pin|Digital_2_Pin 
 80020c0:	f641 73fc 	movw	r3, #8188	; 0x1ffc
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c4:	a916      	add	r1, sp, #88	; 0x58
 80020c6:	4889      	ldr	r0, [pc, #548]	; (80022ec <main+0x2f4>)
  GPIO_InitStruct.Pin = Digital_25_Pin|Digital_26_Pin|Digital_1_Pin|Digital_2_Pin 
 80020c8:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d2:	f7fe fe8b 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : Digital_0_Pin Digital_14_Pin Digital_15_Pin */
  GPIO_InitStruct.Pin = Digital_0_Pin|Digital_14_Pin|Digital_15_Pin;
 80020d6:	f249 0380 	movw	r3, #36992	; 0x9080
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	a916      	add	r1, sp, #88	; 0x58
 80020dc:	4884      	ldr	r0, [pc, #528]	; (80022f0 <main+0x2f8>)
  GPIO_InitStruct.Pin = Digital_0_Pin|Digital_14_Pin|Digital_15_Pin;
 80020de:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e0:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f7fe fe80 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : Digital_4_Pin Digital_5_Pin Digital_6_Pin Digital_7_Pin 
                           Digital_8_Pin Digital_9_Pin Digital_10_Pin Digital_20_Pin 
                           Digital_21_Pin Digital_22_Pin Digital_23_Pin Digital_24_Pin */
  GPIO_InitStruct.Pin = Digital_4_Pin|Digital_5_Pin|Digital_6_Pin|Digital_7_Pin 
 80020ec:	f24f 53f6 	movw	r3, #62966	; 0xf5f6
                          |Digital_8_Pin|Digital_9_Pin|Digital_10_Pin|Digital_20_Pin 
                          |Digital_21_Pin|Digital_22_Pin|Digital_23_Pin|Digital_24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	a916      	add	r1, sp, #88	; 0x58
 80020f2:	4880      	ldr	r0, [pc, #512]	; (80022f4 <main+0x2fc>)
  GPIO_InitStruct.Pin = Digital_4_Pin|Digital_5_Pin|Digital_6_Pin|Digital_7_Pin 
 80020f4:	9316      	str	r3, [sp, #88]	; 0x58

  /*Configure GPIO pin : Digital_19_Pin */
  GPIO_InitStruct.Pin = Digital_19_Pin;
 80020f6:	f04f 0b04 	mov.w	fp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f7fe fe73 	bl	8000dec <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Digital_19_GPIO_Port, &GPIO_InitStruct);
 8002106:	a916      	add	r1, sp, #88	; 0x58
 8002108:	487b      	ldr	r0, [pc, #492]	; (80022f8 <main+0x300>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210a:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = Digital_19_Pin;
 800210e:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(Digital_19_GPIO_Port, &GPIO_InitStruct);
 8002116:	f7fe fe69 	bl	8000dec <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800211a:	9402      	str	r4, [sp, #8]
 800211c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800211e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002122:	632b      	str	r3, [r5, #48]	; 0x30
 8002124:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800212e:	9403      	str	r4, [sp, #12]
 8002130:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002136:	632b      	str	r3, [r5, #48]	; 0x30
 8002138:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  htim1.Instance = TIM1;
 800213a:	4d71      	ldr	r5, [pc, #452]	; (8002300 <main+0x308>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002140:	4622      	mov	r2, r4
 8002142:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002144:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002146:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002148:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800214a:	f7fe fc6b 	bl	8000a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800214e:	2010      	movs	r0, #16
 8002150:	f7fe fc9c 	bl	8000a8c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002154:	4622      	mov	r2, r4
 8002156:	4621      	mov	r1, r4
 8002158:	2038      	movs	r0, #56	; 0x38
 800215a:	f7fe fc63 	bl	8000a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800215e:	2038      	movs	r0, #56	; 0x38
 8002160:	f7fe fc94 	bl	8000a8c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002164:	4621      	mov	r1, r4
 8002166:	2210      	movs	r2, #16
 8002168:	a816      	add	r0, sp, #88	; 0x58
 800216a:	f000 fd13 	bl	8002b94 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800216e:	4a65      	ldr	r2, [pc, #404]	; (8002304 <main+0x30c>)
  hadc1.Init.ScanConvMode = ENABLE;
 8002170:	f8c6 8010 	str.w	r8, [r6, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002178:	e886 000c 	stmia.w	r6, {r2, r3}
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800217c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002180:	62f3      	str	r3, [r6, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8002182:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8002186:	62b3      	str	r3, [r6, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002188:	4630      	mov	r0, r6
  hadc1.Init.NbrOfConversion = 6;
 800218a:	2306      	movs	r3, #6
 800218c:	61f3      	str	r3, [r6, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800218e:	f886 8030 	strb.w	r8, [r6, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002192:	f8c6 8014 	str.w	r8, [r6, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002196:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002198:	7634      	strb	r4, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800219a:	f886 4020 	strb.w	r4, [r6, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800219e:	60f4      	str	r4, [r6, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021a0:	f7fe fa08 	bl	80005b4 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80021a4:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a6:	a916      	add	r1, sp, #88	; 0x58
 80021a8:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 80021aa:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80021ae:	9318      	str	r3, [sp, #96]	; 0x60
  sConfig.Channel = ADC_CHANNEL_0;
 80021b0:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b2:	f7fe fb83 	bl	80008bc <HAL_ADC_ConfigChannel>
  sConfig.Rank = 2;
 80021b6:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b8:	a916      	add	r1, sp, #88	; 0x58
 80021ba:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_1;
 80021bc:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  sConfig.Rank = 2;
 80021c0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021c2:	f7fe fb7b 	bl	80008bc <HAL_ADC_ConfigChannel>
  sConfig.Rank = 3;
 80021c6:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021c8:	a916      	add	r1, sp, #88	; 0x58
 80021ca:	4630      	mov	r0, r6
  sConfig.Rank = 3;
 80021cc:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Channel = ADC_CHANNEL_4;
 80021ce:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d2:	f7fe fb73 	bl	80008bc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 80021d6:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d8:	a916      	add	r1, sp, #88	; 0x58
 80021da:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_8;
 80021dc:	9316      	str	r3, [sp, #88]	; 0x58
  sConfig.Rank = 4;
 80021de:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e2:	f7fe fb6b 	bl	80008bc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_11;
 80021e6:	230b      	movs	r3, #11
 80021e8:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ea:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Rank = 5;
 80021ec:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ee:	4630      	mov	r0, r6
  sConfig.Rank = 5;
 80021f0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021f2:	f7fe fb63 	bl	80008bc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_10;
 80021f6:	230a      	movs	r3, #10
 80021f8:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021fa:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Rank = 6;
 80021fc:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021fe:	4630      	mov	r0, r6
  sConfig.Rank = 6;
 8002200:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002202:	f7fe fb5b 	bl	80008bc <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	2210      	movs	r2, #16
 8002208:	4621      	mov	r1, r4
 800220a:	a80b      	add	r0, sp, #44	; 0x2c
 800220c:	f000 fcc2 	bl	8002b94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002210:	221c      	movs	r2, #28
 8002212:	4621      	mov	r1, r4
 8002214:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002216:	9409      	str	r4, [sp, #36]	; 0x24
 8002218:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221a:	f000 fcbb 	bl	8002b94 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800221e:	2220      	movs	r2, #32
 8002220:	4621      	mov	r1, r4
 8002222:	a816      	add	r0, sp, #88	; 0x58
 8002224:	f000 fcb6 	bl	8002b94 <memset>
  htim1.Init.Prescaler = 200;
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <main+0x310>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222a:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 4095;
 800222c:	f640 79ff 	movw	r9, #4095	; 0xfff
  htim1.Init.Prescaler = 200;
 8002230:	f04f 08c8 	mov.w	r8, #200	; 0xc8
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002234:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 200;
 8002236:	e885 0108 	stmia.w	r5, {r3, r8}
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  htim1.Init.Period = 4095;
 800223e:	f8c5 900c 	str.w	r9, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002242:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002244:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002246:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002248:	f7ff fa42 	bl	80016d0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800224c:	a90b      	add	r1, sp, #44	; 0x2c
 800224e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002250:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002254:	f7ff fb12 	bl	800187c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002258:	4628      	mov	r0, r5
 800225a:	f7ff fa53 	bl	8001704 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800225e:	a909      	add	r1, sp, #36	; 0x24
 8002260:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002262:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002264:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002266:	f7ff fbcb 	bl	8001a00 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800226a:	2360      	movs	r3, #96	; 0x60
 800226c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800226e:	4622      	mov	r2, r4
  sConfigOC.Pulse = 100;
 8002270:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002272:	a90f      	add	r1, sp, #60	; 0x3c
 8002274:	4628      	mov	r0, r5
  sConfigOC.Pulse = 100;
 8002276:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002278:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800227a:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227c:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800227e:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002280:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002282:	f7ff fa8f 	bl	80017a4 <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.Pulse = 101;
 8002286:	2365      	movs	r3, #101	; 0x65
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002288:	465a      	mov	r2, fp
 800228a:	a90f      	add	r1, sp, #60	; 0x3c
 800228c:	4628      	mov	r0, r5
  sConfigOC.Pulse = 101;
 800228e:	9310      	str	r3, [sp, #64]	; 0x40
 8002290:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002292:	f7ff fa87 	bl	80017a4 <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.Pulse = 102;
 8002296:	2266      	movs	r2, #102	; 0x66
 8002298:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800229a:	a90f      	add	r1, sp, #60	; 0x3c
 800229c:	2208      	movs	r2, #8
 800229e:	4628      	mov	r0, r5
 80022a0:	f7ff fa80 	bl	80017a4 <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.Pulse = 103;
 80022a4:	2267      	movs	r2, #103	; 0x67
 80022a6:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022a8:	a90f      	add	r1, sp, #60	; 0x3c
 80022aa:	220c      	movs	r2, #12
 80022ac:	4628      	mov	r0, r5
 80022ae:	f7ff fa79 	bl	80017a4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022b2:	a916      	add	r1, sp, #88	; 0x58
 80022b4:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022b6:	971b      	str	r7, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022b8:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022ba:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022bc:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = 0;
 80022be:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022c0:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022c2:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022c4:	f7ff fbba 	bl	8001a3c <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80022c8:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 80022ca:	4f10      	ldr	r7, [pc, #64]	; (800230c <main+0x314>)
  HAL_TIM_MspPostInit(&htim1);
 80022cc:	f000 fb12 	bl	80028f4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d0:	2210      	movs	r2, #16
 80022d2:	4621      	mov	r1, r4
 80022d4:	a80f      	add	r0, sp, #60	; 0x3c
 80022d6:	f000 fc5d 	bl	8002b94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022da:	4621      	mov	r1, r4
 80022dc:	221c      	movs	r2, #28
 80022de:	a816      	add	r0, sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80022e2:	e015      	b.n	8002310 <main+0x318>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	20000134 	.word	0x20000134
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	10210000 	.word	0x10210000
 8002300:	20000200 	.word	0x20000200
 8002304:	40012000 	.word	0x40012000
 8002308:	40010000 	.word	0x40010000
 800230c:	20000240 	.word	0x20000240
 8002310:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002312:	f000 fc3f 	bl	8002b94 <memset>
  htim2.Instance = TIM2;
 8002316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800231a:	4638      	mov	r0, r7
  htim2.Init.Prescaler = 200;
 800231c:	e887 0104 	stmia.w	r7, {r2, r8}
  htim2.Init.Period = 4095;
 8002320:	f8c7 900c 	str.w	r9, [r7, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	60bc      	str	r4, [r7, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002328:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800232a:	f7ff f9d1 	bl	80016d0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800232e:	a90f      	add	r1, sp, #60	; 0x3c
 8002330:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002332:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002336:	f7ff faa1 	bl	800187c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800233a:	4638      	mov	r0, r7
 800233c:	f7ff f9e2 	bl	8001704 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002340:	a90b      	add	r1, sp, #44	; 0x2c
 8002342:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002344:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002346:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002348:	f7ff fb5a 	bl	8001a00 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800234c:	2360      	movs	r3, #96	; 0x60
 800234e:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002350:	4622      	mov	r2, r4
  sConfigOC.Pulse = 100;
 8002352:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002354:	a916      	add	r1, sp, #88	; 0x58
 8002356:	4638      	mov	r0, r7
  sConfigOC.Pulse = 100;
 8002358:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235a:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235c:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800235e:	f7ff fa21 	bl	80017a4 <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.Pulse = 101;
 8002362:	9b01      	ldr	r3, [sp, #4]
 8002364:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002366:	465a      	mov	r2, fp
 8002368:	a916      	add	r1, sp, #88	; 0x58
 800236a:	4638      	mov	r0, r7
 800236c:	f7ff fa1a 	bl	80017a4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8002370:	4638      	mov	r0, r7
 8002372:	f000 fabf 	bl	80028f4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002376:	2210      	movs	r2, #16
 8002378:	4621      	mov	r1, r4
 800237a:	a80f      	add	r0, sp, #60	; 0x3c
  htim3.Instance = TIM3;
 800237c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80024f4 <main+0x4fc>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002380:	f000 fc08 	bl	8002b94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002384:	221c      	movs	r2, #28
 8002386:	4621      	mov	r1, r4
 8002388:	a816      	add	r0, sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238a:	940b      	str	r4, [sp, #44]	; 0x2c
 800238c:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 800238e:	f000 fc01 	bl	8002b94 <memset>
  htim3.Init.Prescaler = 68;
 8002392:	4953      	ldr	r1, [pc, #332]	; (80024e0 <main+0x4e8>)
  htim3.Init.Period = 4095;
 8002394:	f8c8 900c 	str.w	r9, [r8, #12]
  htim3.Init.Prescaler = 68;
 8002398:	2244      	movs	r2, #68	; 0x44
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800239a:	4640      	mov	r0, r8
  htim3.Init.Prescaler = 68;
 800239c:	e888 0006 	stmia.w	r8, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a0:	f8c8 4008 	str.w	r4, [r8, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a4:	f8c8 4010 	str.w	r4, [r8, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a8:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023ac:	f7ff f990 	bl	80016d0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023b0:	a90f      	add	r1, sp, #60	; 0x3c
 80023b2:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023b8:	f7ff fa60 	bl	800187c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023bc:	4640      	mov	r0, r8
 80023be:	f7ff f9a1 	bl	8001704 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c2:	a90b      	add	r1, sp, #44	; 0x2c
 80023c4:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c6:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c8:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ca:	f7ff fb19 	bl	8001a00 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ce:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d0:	4622      	mov	r2, r4
 80023d2:	a916      	add	r1, sp, #88	; 0x58
 80023d4:	4640      	mov	r0, r8
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d6:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.Pulse = 4095;
 80023d8:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023dc:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023de:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e0:	f7ff f9e0 	bl	80017a4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80023e4:	4640      	mov	r0, r8
 80023e6:	f000 fa85 	bl	80028f4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ea:	2210      	movs	r2, #16
 80023ec:	4621      	mov	r1, r4
 80023ee:	a816      	add	r0, sp, #88	; 0x58
 80023f0:	f000 fbd0 	bl	8002b94 <memset>
  htim8.Instance = TIM8;
 80023f4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80024f8 <main+0x500>
  htim8.Init.Prescaler = 84;
 80023f8:	483a      	ldr	r0, [pc, #232]	; (80024e4 <main+0x4ec>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fa:	940f      	str	r4, [sp, #60]	; 0x3c
  htim8.Init.Prescaler = 84;
 80023fc:	2354      	movs	r3, #84	; 0x54
 80023fe:	e889 0009 	stmia.w	r9, {r0, r3}
  htim8.Init.Period = 2000;
 8002402:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002406:	4648      	mov	r0, r9
  htim8.Init.Period = 2000;
 8002408:	f8c9 300c 	str.w	r3, [r9, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240c:	9410      	str	r4, [sp, #64]	; 0x40
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240e:	f8c9 4008 	str.w	r4, [r9, #8]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002412:	f8c9 4010 	str.w	r4, [r9, #16]
  htim8.Init.RepetitionCounter = 0;
 8002416:	f8c9 4014 	str.w	r4, [r9, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241a:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800241e:	f7ff f957 	bl	80016d0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002422:	a916      	add	r1, sp, #88	; 0x58
 8002424:	4648      	mov	r0, r9
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002426:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800242a:	f7ff fa27 	bl	800187c <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800242e:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002430:	a90f      	add	r1, sp, #60	; 0x3c
 8002432:	4648      	mov	r0, r9
  huart2.Instance = USART2;
 8002434:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80024fc <main+0x504>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002438:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243a:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800243c:	f7ff fae0 	bl	8001a00 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Init.BaudRate = 115200;
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <main+0x4f0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002442:	f8ca 4008 	str.w	r4, [sl, #8]
  huart2.Init.BaudRate = 115200;
 8002446:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800244a:	e88a 4008 	stmia.w	sl, {r3, lr}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800244e:	4650      	mov	r0, sl
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002450:	230c      	movs	r3, #12
 8002452:	f8ca 3014 	str.w	r3, [sl, #20]
 8002456:	9301      	str	r3, [sp, #4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002458:	f8ca 400c 	str.w	r4, [sl, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800245c:	f8ca 4010 	str.w	r4, [sl, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002460:	f8ca 4018 	str.w	r4, [sl, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	f8ca 401c 	str.w	r4, [sl, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002468:	f7ff fc5e 	bl	8001d28 <HAL_UART_Init>
	HAL_ADC_Start_DMA(&hadc1, ADCValues, sizeof(ADCValues)/sizeof(ADCValues[0]));
 800246c:	2206      	movs	r2, #6
 800246e:	491f      	ldr	r1, [pc, #124]	; (80024ec <main+0x4f4>)
 8002470:	4630      	mov	r0, r6
 8002472:	f7fe f945 	bl	8000700 <HAL_ADC_Start_DMA>
	HAL_UART_Receive_DMA(&huart2, RXData, sizeof(RXData)/sizeof(RXData[0]));
 8002476:	2228      	movs	r2, #40	; 0x28
 8002478:	491d      	ldr	r1, [pc, #116]	; (80024f0 <main+0x4f8>)
 800247a:	4650      	mov	r0, sl
 800247c:	f7ff fce0 	bl	8001e40 <HAL_UART_Receive_DMA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // PWM output 0
 8002480:	4621      	mov	r1, r4
 8002482:	4628      	mov	r0, r5
 8002484:	f7ff fa9c 	bl	80019c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // PWM output 1
 8002488:	4659      	mov	r1, fp
 800248a:	4628      	mov	r0, r5
 800248c:	f7ff fa98 	bl	80019c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // PWM output 2
 8002490:	2108      	movs	r1, #8
 8002492:	4628      	mov	r0, r5
 8002494:	f7ff fa94 	bl	80019c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // PWM output 3
 8002498:	9b01      	ldr	r3, [sp, #4]
 800249a:	4628      	mov	r0, r5
 800249c:	4619      	mov	r1, r3
 800249e:	f7ff fa8f 	bl	80019c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PWM output 4
 80024a2:	4621      	mov	r1, r4
 80024a4:	4638      	mov	r0, r7
 80024a6:	f7ff fa8b 	bl	80019c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PWM output 5
 80024aa:	4659      	mov	r1, fp
 80024ac:	4638      	mov	r0, r7
 80024ae:	f7ff fa87 	bl	80019c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // For dither frequency
 80024b2:	4621      	mov	r1, r4
 80024b4:	4640      	mov	r0, r8
 80024b6:	f7ff fa83 	bl	80019c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // For ADC trig event -> scan
 80024ba:	4621      	mov	r1, r4
 80024bc:	4648      	mov	r0, r9
 80024be:	f7ff fa7f 	bl	80019c0 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR1 = 0;
 80024c2:	682b      	ldr	r3, [r5, #0]
 80024c4:	635c      	str	r4, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = 0;
 80024c6:	639c      	str	r4, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = 0;
 80024c8:	63dc      	str	r4, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = 0;
 80024ca:	641c      	str	r4, [r3, #64]	; 0x40
	htim2.Instance->CCR1 = 0; // Set this to 4095 and green LED will light up
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	635c      	str	r4, [r3, #52]	; 0x34
	htim2.Instance->CCR2 = 0;
 80024d0:	639c      	str	r4, [r3, #56]	; 0x38
	htim3.Instance->CCR1 = 0;
 80024d2:	f8d8 3000 	ldr.w	r3, [r8]
 80024d6:	635c      	str	r4, [r3, #52]	; 0x34
	htim8.Instance->CCR1 = 0;
 80024d8:	f8d9 3000 	ldr.w	r3, [r9]
 80024dc:	635c      	str	r4, [r3, #52]	; 0x34
 80024de:	e7fe      	b.n	80024de <main+0x4e6>
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40010400 	.word	0x40010400
 80024e8:	40004400 	.word	0x40004400
 80024ec:	2000017c 	.word	0x2000017c
 80024f0:	2000010c 	.word	0x2000010c
 80024f4:	200000cc 	.word	0x200000cc
 80024f8:	2000008c 	.word	0x2000008c
 80024fc:	20000280 	.word	0x20000280

08002500 <HAL_UART_RxCpltCallback>:

/*
 * When we get our message, in this case it will be sizeof(RXData)/sizeof(RXData[0]) bytes of slider inputs.
 * This method will be called
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Check if we are going to ONLY set PWM's(0) or set digitals(1). Last RXData have the send state element
	uint8_t send_state = RXData[sizeof(RXData)/sizeof(RXData[0]) - 1];
 8002504:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <HAL_UART_RxCpltCallback+0x1fc>)
 8002506:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800250a:	461d      	mov	r5, r3
	if(send_state == 0){
 800250c:	2a00      	cmp	r2, #0
 800250e:	d147      	bne.n	80025a0 <HAL_UART_RxCpltCallback+0xa0>
		// Set PWM counters period by convert short -> byte
		htim1.Instance->CCR1 = (uint32_t) ((RXData[0] << 8) | RXData[1]);
 8002510:	4a7b      	ldr	r2, [pc, #492]	; (8002700 <HAL_UART_RxCpltCallback+0x200>)
 8002512:	7818      	ldrb	r0, [r3, #0]
 8002514:	7859      	ldrb	r1, [r3, #1]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800251c:	6351      	str	r1, [r2, #52]	; 0x34
		htim1.Instance->CCR2 = (uint32_t) ((RXData[2] << 8) | RXData[3]);
 800251e:	7898      	ldrb	r0, [r3, #2]
 8002520:	78d9      	ldrb	r1, [r3, #3]
 8002522:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002526:	6391      	str	r1, [r2, #56]	; 0x38
		htim1.Instance->CCR3 = (uint32_t) ((RXData[4] << 8) | RXData[5]);
 8002528:	7918      	ldrb	r0, [r3, #4]
 800252a:	7959      	ldrb	r1, [r3, #5]
 800252c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002530:	63d1      	str	r1, [r2, #60]	; 0x3c
		htim1.Instance->CCR4 = (uint32_t) ((RXData[6] << 8) | RXData[7]);
 8002532:	7998      	ldrb	r0, [r3, #6]
 8002534:	79d9      	ldrb	r1, [r3, #7]
 8002536:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800253a:	6411      	str	r1, [r2, #64]	; 0x40
		htim2.Instance->CCR1 = (uint32_t) ((RXData[8] << 8) | RXData[9]);
 800253c:	4a71      	ldr	r2, [pc, #452]	; (8002704 <HAL_UART_RxCpltCallback+0x204>)
 800253e:	7a18      	ldrb	r0, [r3, #8]
 8002540:	6811      	ldr	r1, [r2, #0]
 8002542:	7a5a      	ldrb	r2, [r3, #9]
 8002544:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002548:	634a      	str	r2, [r1, #52]	; 0x34
		htim2.Instance->CCR2 = (uint32_t) ((RXData[10] << 8) | RXData[11]);
 800254a:	7a9a      	ldrb	r2, [r3, #10]
 800254c:	7adb      	ldrb	r3, [r3, #11]
 800254e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002552:	638b      	str	r3, [r1, #56]	; 0x38
			}
		}
	}

	// Convert ADC values to
	TXData[0] = (uint8_t) (ADCValues[0] >> 8);
 8002554:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <HAL_UART_RxCpltCallback+0x208>)
 8002556:	496d      	ldr	r1, [pc, #436]	; (800270c <HAL_UART_RxCpltCallback+0x20c>)
 8002558:	681a      	ldr	r2, [r3, #0]
	TXData[1] = (uint8_t) (ADCValues[0] & 0xFF);
 800255a:	704a      	strb	r2, [r1, #1]
	TXData[0] = (uint8_t) (ADCValues[0] >> 8);
 800255c:	0a10      	lsrs	r0, r2, #8
	TXData[2] = (uint8_t) (ADCValues[1] >> 8);
 800255e:	685a      	ldr	r2, [r3, #4]
	TXData[0] = (uint8_t) (ADCValues[0] >> 8);
 8002560:	7008      	strb	r0, [r1, #0]
	TXData[3] = (uint8_t) (ADCValues[1] & 0xFF);
 8002562:	70ca      	strb	r2, [r1, #3]
	TXData[2] = (uint8_t) (ADCValues[1] >> 8);
 8002564:	0a10      	lsrs	r0, r2, #8
	TXData[4] = (uint8_t) (ADCValues[2] >> 8);
 8002566:	689a      	ldr	r2, [r3, #8]
	TXData[2] = (uint8_t) (ADCValues[1] >> 8);
 8002568:	7088      	strb	r0, [r1, #2]
	TXData[5] = (uint8_t) (ADCValues[2] & 0xFF);
 800256a:	714a      	strb	r2, [r1, #5]
	TXData[4] = (uint8_t) (ADCValues[2] >> 8);
 800256c:	0a10      	lsrs	r0, r2, #8
	TXData[6] = (uint8_t) (ADCValues[3] >> 8);
 800256e:	68da      	ldr	r2, [r3, #12]
	TXData[4] = (uint8_t) (ADCValues[2] >> 8);
 8002570:	7108      	strb	r0, [r1, #4]
	TXData[7] = (uint8_t) (ADCValues[3] & 0xFF);
 8002572:	71ca      	strb	r2, [r1, #7]
	TXData[6] = (uint8_t) (ADCValues[3] >> 8);
 8002574:	0a10      	lsrs	r0, r2, #8
	TXData[8] = (uint8_t) (ADCValues[4] >> 8);
 8002576:	691a      	ldr	r2, [r3, #16]
	TXData[9] = (uint8_t) (ADCValues[4] & 0xFF);
	TXData[10] = (uint8_t) (ADCValues[5] >> 8);
 8002578:	695b      	ldr	r3, [r3, #20]
	TXData[6] = (uint8_t) (ADCValues[3] >> 8);
 800257a:	7188      	strb	r0, [r1, #6]
	TXData[9] = (uint8_t) (ADCValues[4] & 0xFF);
 800257c:	724a      	strb	r2, [r1, #9]
	TXData[8] = (uint8_t) (ADCValues[4] >> 8);
 800257e:	0a10      	lsrs	r0, r2, #8
	TXData[10] = (uint8_t) (ADCValues[5] >> 8);
 8002580:	0a1a      	lsrs	r2, r3, #8
	TXData[8] = (uint8_t) (ADCValues[4] >> 8);
 8002582:	7208      	strb	r0, [r1, #8]
	TXData[10] = (uint8_t) (ADCValues[5] >> 8);
 8002584:	728a      	strb	r2, [r1, #10]
	TXData[11] = (uint8_t) (ADCValues[5] & 0xFF);
 8002586:	72cb      	strb	r3, [r1, #11]

	// Send data to JLoggerServer in about 5 milliseconds
	HAL_UART_Transmit(&huart2, TXData, sizeof(TXData)/sizeof(TXData[0]), 5);
 8002588:	220c      	movs	r2, #12
 800258a:	2305      	movs	r3, #5
 800258c:	4860      	ldr	r0, [pc, #384]	; (8002710 <HAL_UART_RxCpltCallback+0x210>)
 800258e:	f7ff fbf9 	bl	8001d84 <HAL_UART_Transmit>

	// Listen for a new receive
	HAL_UART_Receive_DMA(&huart2, RXData, sizeof(RXData)/sizeof(RXData[0]));
 8002592:	2228      	movs	r2, #40	; 0x28
 8002594:	4959      	ldr	r1, [pc, #356]	; (80026fc <HAL_UART_RxCpltCallback+0x1fc>)
 8002596:	485e      	ldr	r0, [pc, #376]	; (8002710 <HAL_UART_RxCpltCallback+0x210>)

}
 8002598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_UART_Receive_DMA(&huart2, RXData, sizeof(RXData)/sizeof(RXData[0]));
 800259c:	f7ff bc50 	b.w	8001e40 <HAL_UART_Receive_DMA>
	}else if(send_state == 1){
 80025a0:	2a01      	cmp	r2, #1
 80025a2:	d1d7      	bne.n	8002554 <HAL_UART_RxCpltCallback+0x54>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RXData[i]);
 80025a4:	4f5b      	ldr	r7, [pc, #364]	; (8002714 <HAL_UART_RxCpltCallback+0x214>)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RXData[i]);
 80025a6:	4e5c      	ldr	r6, [pc, #368]	; (8002718 <HAL_UART_RxCpltCallback+0x218>)
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RXData[i]);
 80025a8:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002720 <HAL_UART_RxCpltCallback+0x220>
 80025ac:	240c      	movs	r4, #12
			if(i == 12){ 	   // Digital 0
 80025ae:	2c0c      	cmp	r4, #12
 80025b0:	d109      	bne.n	80025c6 <HAL_UART_RxCpltCallback+0xc6>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RXData[i]); //RXData[i] = One or Zero
 80025b2:	7b2a      	ldrb	r2, [r5, #12]
 80025b4:	2180      	movs	r1, #128	; 0x80
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RXData[i]);
 80025b6:	4859      	ldr	r0, [pc, #356]	; (800271c <HAL_UART_RxCpltCallback+0x21c>)
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RXData[i]);
 80025b8:	f7fe fcf2 	bl	8000fa0 <HAL_GPIO_WritePin>
		for(uint8_t i = 12; i < sizeof(RXData)/sizeof(RXData[0]); i++){
 80025bc:	3401      	adds	r4, #1
 80025be:	b2e4      	uxtb	r4, r4
 80025c0:	2c28      	cmp	r4, #40	; 0x28
 80025c2:	d1f4      	bne.n	80025ae <HAL_UART_RxCpltCallback+0xae>
 80025c4:	e7c6      	b.n	8002554 <HAL_UART_RxCpltCallback+0x54>
			}else if(i == 13){ // Digital 1
 80025c6:	2c0d      	cmp	r4, #13
 80025c8:	d103      	bne.n	80025d2 <HAL_UART_RxCpltCallback+0xd2>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RXData[i]);
 80025ca:	7b6a      	ldrb	r2, [r5, #13]
 80025cc:	2110      	movs	r1, #16
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RXData[i]);
 80025ce:	4638      	mov	r0, r7
 80025d0:	e7f2      	b.n	80025b8 <HAL_UART_RxCpltCallback+0xb8>
			}else if(i == 14){ // Digital 2
 80025d2:	2c0e      	cmp	r4, #14
 80025d4:	d102      	bne.n	80025dc <HAL_UART_RxCpltCallback+0xdc>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RXData[i]);
 80025d6:	7baa      	ldrb	r2, [r5, #14]
 80025d8:	2120      	movs	r1, #32
 80025da:	e7f8      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
			}else if(i == 15){ // Digital 3
 80025dc:	2c0f      	cmp	r4, #15
 80025de:	d103      	bne.n	80025e8 <HAL_UART_RxCpltCallback+0xe8>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RXData[i]);
 80025e0:	7bea      	ldrb	r2, [r5, #15]
 80025e2:	2102      	movs	r1, #2
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RXData[i]);
 80025e4:	4630      	mov	r0, r6
 80025e6:	e7e7      	b.n	80025b8 <HAL_UART_RxCpltCallback+0xb8>
			}else if(i == 16){ // Digital 4
 80025e8:	2c10      	cmp	r4, #16
 80025ea:	d102      	bne.n	80025f2 <HAL_UART_RxCpltCallback+0xf2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RXData[i]);
 80025ec:	7c2a      	ldrb	r2, [r5, #16]
 80025ee:	2104      	movs	r1, #4
 80025f0:	e7f8      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 17){ // Digital 5
 80025f2:	2c11      	cmp	r4, #17
 80025f4:	d103      	bne.n	80025fe <HAL_UART_RxCpltCallback+0xfe>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RXData[i]);
 80025f6:	7c6a      	ldrb	r2, [r5, #17]
 80025f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025fc:	e7f2      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 18){ // Digital 6
 80025fe:	2c12      	cmp	r4, #18
 8002600:	d103      	bne.n	800260a <HAL_UART_RxCpltCallback+0x10a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RXData[i]);
 8002602:	7caa      	ldrb	r2, [r5, #18]
 8002604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002608:	e7ec      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 19){ // Digital 7
 800260a:	2c13      	cmp	r4, #19
 800260c:	d103      	bne.n	8002616 <HAL_UART_RxCpltCallback+0x116>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RXData[i]);
 800260e:	7cea      	ldrb	r2, [r5, #19]
 8002610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002614:	e7e6      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 20){ // Digital 8
 8002616:	2c14      	cmp	r4, #20
 8002618:	d103      	bne.n	8002622 <HAL_UART_RxCpltCallback+0x122>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RXData[i]);
 800261a:	7d2a      	ldrb	r2, [r5, #20]
 800261c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002620:	e7e0      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 21){ // Digital 9
 8002622:	2c15      	cmp	r4, #21
 8002624:	d103      	bne.n	800262e <HAL_UART_RxCpltCallback+0x12e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RXData[i]);
 8002626:	7d6a      	ldrb	r2, [r5, #21]
 8002628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800262c:	e7da      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 22){ // Digital 10
 800262e:	2c16      	cmp	r4, #22
 8002630:	d102      	bne.n	8002638 <HAL_UART_RxCpltCallback+0x138>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RXData[i]);
 8002632:	7daa      	ldrb	r2, [r5, #22]
 8002634:	2140      	movs	r1, #64	; 0x40
 8002636:	e7ca      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
			}else if(i == 23){ // Digital 11
 8002638:	2c17      	cmp	r4, #23
 800263a:	d102      	bne.n	8002642 <HAL_UART_RxCpltCallback+0x142>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RXData[i]);
 800263c:	7dea      	ldrb	r2, [r5, #23]
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	e7c5      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
			}else if(i == 24){ // Digital 12
 8002642:	2c18      	cmp	r4, #24
 8002644:	d103      	bne.n	800264e <HAL_UART_RxCpltCallback+0x14e>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RXData[i]);
 8002646:	7e2a      	ldrb	r2, [r5, #24]
 8002648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264c:	e7bf      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
			}else if(i == 25){ // Digital 13
 800264e:	2c19      	cmp	r4, #25
 8002650:	d103      	bne.n	800265a <HAL_UART_RxCpltCallback+0x15a>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RXData[i]);
 8002652:	7e6a      	ldrb	r2, [r5, #25]
 8002654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002658:	e7b9      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
			}else if(i == 26){ // Digital 14
 800265a:	2c1a      	cmp	r4, #26
 800265c:	d103      	bne.n	8002666 <HAL_UART_RxCpltCallback+0x166>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RXData[i]);
 800265e:	7eaa      	ldrb	r2, [r5, #26]
 8002660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002664:	e7a7      	b.n	80025b6 <HAL_UART_RxCpltCallback+0xb6>
			}else if(i == 27){ // Digital 15
 8002666:	2c1b      	cmp	r4, #27
 8002668:	d103      	bne.n	8002672 <HAL_UART_RxCpltCallback+0x172>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RXData[i]);
 800266a:	7eea      	ldrb	r2, [r5, #27]
 800266c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002670:	e7a1      	b.n	80025b6 <HAL_UART_RxCpltCallback+0xb6>
			}else if(i == 28){ // Digital 16
 8002672:	2c1c      	cmp	r4, #28
 8002674:	d103      	bne.n	800267e <HAL_UART_RxCpltCallback+0x17e>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RXData[i]);
 8002676:	7f2a      	ldrb	r2, [r5, #28]
 8002678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800267c:	e7a7      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
			}else if(i == 29){ // Digital 17
 800267e:	2c1d      	cmp	r4, #29
 8002680:	d103      	bne.n	800268a <HAL_UART_RxCpltCallback+0x18a>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RXData[i]);
 8002682:	7f6a      	ldrb	r2, [r5, #29]
 8002684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002688:	e7a1      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
			}else if(i == 30){ // Digital 18
 800268a:	2c1e      	cmp	r4, #30
 800268c:	d103      	bne.n	8002696 <HAL_UART_RxCpltCallback+0x196>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RXData[i]);
 800268e:	7faa      	ldrb	r2, [r5, #30]
 8002690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002694:	e79b      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
			}else if(i == 31){ // Digital 19
 8002696:	2c1f      	cmp	r4, #31
 8002698:	d103      	bne.n	80026a2 <HAL_UART_RxCpltCallback+0x1a2>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RXData[i]);
 800269a:	7fea      	ldrb	r2, [r5, #31]
 800269c:	2104      	movs	r1, #4
 800269e:	4640      	mov	r0, r8
 80026a0:	e78a      	b.n	80025b8 <HAL_UART_RxCpltCallback+0xb8>
			}else if(i == 32){ // Digital 20
 80026a2:	2c20      	cmp	r4, #32
 80026a4:	d103      	bne.n	80026ae <HAL_UART_RxCpltCallback+0x1ae>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RXData[i]);
 80026a6:	f895 2020 	ldrb.w	r2, [r5, #32]
 80026aa:	2110      	movs	r1, #16
 80026ac:	e79a      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 33){ // Digital 21
 80026ae:	2c21      	cmp	r4, #33	; 0x21
 80026b0:	d103      	bne.n	80026ba <HAL_UART_RxCpltCallback+0x1ba>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RXData[i]);
 80026b2:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 80026b6:	2120      	movs	r1, #32
 80026b8:	e794      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 34){ // Digital 22
 80026ba:	2c22      	cmp	r4, #34	; 0x22
 80026bc:	d103      	bne.n	80026c6 <HAL_UART_RxCpltCallback+0x1c6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RXData[i]);
 80026be:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 80026c2:	2140      	movs	r1, #64	; 0x40
 80026c4:	e78e      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 35){ // Digital 23
 80026c6:	2c23      	cmp	r4, #35	; 0x23
 80026c8:	d103      	bne.n	80026d2 <HAL_UART_RxCpltCallback+0x1d2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RXData[i]);
 80026ca:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	e788      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 36){ // Digital 24
 80026d2:	2c24      	cmp	r4, #36	; 0x24
 80026d4:	d104      	bne.n	80026e0 <HAL_UART_RxCpltCallback+0x1e0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RXData[i]);
 80026d6:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 80026da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026de:	e781      	b.n	80025e4 <HAL_UART_RxCpltCallback+0xe4>
			}else if(i == 37){ // Digital 25
 80026e0:	2c25      	cmp	r4, #37	; 0x25
 80026e2:	d103      	bne.n	80026ec <HAL_UART_RxCpltCallback+0x1ec>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RXData[i]);
 80026e4:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 80026e8:	2104      	movs	r1, #4
 80026ea:	e770      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
			}else if(i == 38){ // Digital 26
 80026ec:	2c26      	cmp	r4, #38	; 0x26
 80026ee:	f47f af65 	bne.w	80025bc <HAL_UART_RxCpltCallback+0xbc>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RXData[i]);
 80026f2:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 80026f6:	2108      	movs	r1, #8
 80026f8:	e769      	b.n	80025ce <HAL_UART_RxCpltCallback+0xce>
 80026fa:	bf00      	nop
 80026fc:	2000010c 	.word	0x2000010c
 8002700:	20000200 	.word	0x20000200
 8002704:	20000240 	.word	0x20000240
 8002708:	2000017c 	.word	0x2000017c
 800270c:	200001f4 	.word	0x200001f4
 8002710:	20000280 	.word	0x20000280
 8002714:	40020800 	.word	0x40020800
 8002718:	40020400 	.word	0x40020400
 800271c:	40020000 	.word	0x40020000
 8002720:	40020c00 	.word	0x40020c00

08002724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002724:	4770      	bx	lr
	...

08002728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_MspInit+0x3c>)
 800272c:	2100      	movs	r1, #0
 800272e:	9100      	str	r1, [sp, #0]
 8002730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
 8002738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800273e:	9200      	str	r2, [sp, #0]
 8002740:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	9101      	str	r1, [sp, #4]
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002754:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002758:	f7fe f952 	bl	8000a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275c:	b003      	add	sp, #12
 800275e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800

08002768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002768:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276a:	2214      	movs	r2, #20
{
 800276c:	b08a      	sub	sp, #40	; 0x28
 800276e:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	2100      	movs	r1, #0
 8002772:	eb0d 0002 	add.w	r0, sp, r2
 8002776:	f000 fa0d 	bl	8002b94 <memset>
  if(hadc->Instance==ADC1)
 800277a:	6832      	ldr	r2, [r6, #0]
 800277c:	4b31      	ldr	r3, [pc, #196]	; (8002844 <HAL_ADC_MspInit+0xdc>)
 800277e:	429a      	cmp	r2, r3
 8002780:	d15d      	bne.n	800283e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002782:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002786:	2500      	movs	r5, #0
 8002788:	9501      	str	r5, [sp, #4]
 800278a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = Analog_5_Pin|Analog_4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800278c:	482e      	ldr	r0, [pc, #184]	; (8002848 <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800278e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002792:	645a      	str	r2, [r3, #68]	; 0x44
 8002794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002796:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800279a:	9201      	str	r2, [sp, #4]
 800279c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	9502      	str	r5, [sp, #8]
 80027a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a2:	f042 0204 	orr.w	r2, r2, #4
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
 80027a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027aa:	f002 0204 	and.w	r2, r2, #4
 80027ae:	9202      	str	r2, [sp, #8]
 80027b0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	9503      	str	r5, [sp, #12]
 80027b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
 80027bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027be:	f002 0201 	and.w	r2, r2, #1
 80027c2:	9203      	str	r2, [sp, #12]
 80027c4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	9504      	str	r5, [sp, #16]
 80027c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ca:	f042 0202 	orr.w	r2, r2, #2
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = Analog_5_Pin|Analog_4_Pin;
 80027d6:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027da:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = Analog_5_Pin|Analog_4_Pin;
 80027de:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e0:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e2:	f7fe fb03 	bl	8000dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Analog_0_Pin|Analog_1_Pin|Analog_2_Pin;
 80027e6:	2313      	movs	r3, #19
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	a905      	add	r1, sp, #20
 80027ea:	4818      	ldr	r0, [pc, #96]	; (800284c <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pin = Analog_0_Pin|Analog_1_Pin|Analog_2_Pin;
 80027ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ee:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f7fe fafb 	bl	8000dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Analog_3_Pin;
 80027f6:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Analog_3_GPIO_Port, &GPIO_InitStruct);
 80027f8:	4815      	ldr	r0, [pc, #84]	; (8002850 <HAL_ADC_MspInit+0xe8>)
    GPIO_InitStruct.Pin = Analog_3_Pin;
 80027fa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(Analog_3_GPIO_Port, &GPIO_InitStruct);
 80027fc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fe:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	9507      	str	r5, [sp, #28]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002802:	4c14      	ldr	r4, [pc, #80]	; (8002854 <HAL_ADC_MspInit+0xec>)
    HAL_GPIO_Init(Analog_3_GPIO_Port, &GPIO_InitStruct);
 8002804:	f7fe faf2 	bl	8000dec <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800280a:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800280c:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002814:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281a:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800281c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002820:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002822:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002824:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002828:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800282a:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800282c:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282e:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002830:	f7fe f966 	bl	8000b00 <HAL_DMA_Init>
 8002834:	b108      	cbz	r0, 800283a <HAL_ADC_MspInit+0xd2>
    {
      Error_Handler();
 8002836:	f7ff ff75 	bl	8002724 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800283a:	63b4      	str	r4, [r6, #56]	; 0x38
 800283c:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800283e:	b00a      	add	sp, #40	; 0x28
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	bf00      	nop
 8002844:	40012000 	.word	0x40012000
 8002848:	40020800 	.word	0x40020800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	20000194 	.word	0x20000194
 8002858:	40026410 	.word	0x40026410

0800285c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 800285c:	6803      	ldr	r3, [r0, #0]
 800285e:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <HAL_TIM_Base_MspInit+0x88>)
 8002860:	4293      	cmp	r3, r2
{
 8002862:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8002864:	d10d      	bne.n	8002882 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_TIM_Base_MspInit+0x8c>)
 800286c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800287e:	b004      	add	sp, #16
 8002880:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002886:	d10c      	bne.n	80028a2 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_TIM_Base_MspInit+0x8c>)
 800288e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	9b01      	ldr	r3, [sp, #4]
 80028a0:	e7ed      	b.n	800287e <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM3)
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <HAL_TIM_Base_MspInit+0x90>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10c      	bne.n	80028c2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_TIM_Base_MspInit+0x8c>)
 80028ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b0:	f042 0202 	orr.w	r2, r2, #2
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	9b02      	ldr	r3, [sp, #8]
 80028c0:	e7dd      	b.n	800287e <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM8)
 80028c2:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <HAL_TIM_Base_MspInit+0x94>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d1da      	bne.n	800287e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	9303      	str	r3, [sp, #12]
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_TIM_Base_MspInit+0x8c>)
 80028ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028d0:	f042 0202 	orr.w	r2, r2, #2
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	9303      	str	r3, [sp, #12]
 80028de:	9b03      	ldr	r3, [sp, #12]
}
 80028e0:	e7cd      	b.n	800287e <HAL_TIM_Base_MspInit+0x22>
 80028e2:	bf00      	nop
 80028e4:	40010000 	.word	0x40010000
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40010400 	.word	0x40010400

080028f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f6:	2214      	movs	r2, #20
{
 80028f8:	b08a      	sub	sp, #40	; 0x28
 80028fa:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	2100      	movs	r1, #0
 80028fe:	eb0d 0002 	add.w	r0, sp, r2
 8002902:	f000 f947 	bl	8002b94 <memset>
  if(htim->Instance==TIM1)
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	4a2e      	ldr	r2, [pc, #184]	; (80029c4 <HAL_TIM_MspPostInit+0xd0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d115      	bne.n	800293a <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <HAL_TIM_MspPostInit+0xd4>)
 8002914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	9b01      	ldr	r3, [sp, #4]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin|PWM_2_Pin|PWM_3_Pin;
 8002926:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800292a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002930:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = Dither_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002932:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(Dither_PWM_GPIO_Port, &GPIO_InitStruct);
 8002934:	a905      	add	r1, sp, #20
 8002936:	4825      	ldr	r0, [pc, #148]	; (80029cc <HAL_TIM_MspPostInit+0xd8>)
 8002938:	e02c      	b.n	8002994 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM2)
 800293a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293e:	d12d      	bne.n	800299c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002944:	2400      	movs	r4, #0
 8002946:	9402      	str	r4, [sp, #8]
 8002948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(PWM_4_GPIO_Port, &GPIO_InitStruct);
 800294a:	4820      	ldr	r0, [pc, #128]	; (80029cc <HAL_TIM_MspPostInit+0xd8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
 8002952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002954:	f002 0201 	and.w	r2, r2, #1
 8002958:	9202      	str	r2, [sp, #8]
 800295a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	9403      	str	r4, [sp, #12]
 800295e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002960:	f042 0202 	orr.w	r2, r2, #2
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	9303      	str	r3, [sp, #12]
 800296e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = PWM_4_Pin;
 8002972:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002974:	2501      	movs	r5, #1
    HAL_GPIO_Init(PWM_4_GPIO_Port, &GPIO_InitStruct);
 8002976:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = PWM_4_Pin;
 8002978:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800297c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM_4_GPIO_Port, &GPIO_InitStruct);
 800297e:	f7fe fa35 	bl	8000dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_5_Pin;
 8002982:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(PWM_5_GPIO_Port, &GPIO_InitStruct);
 8002986:	4812      	ldr	r0, [pc, #72]	; (80029d0 <HAL_TIM_MspPostInit+0xdc>)
    GPIO_InitStruct.Pin = PWM_5_Pin;
 8002988:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002990:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM_5_GPIO_Port, &GPIO_InitStruct);
 8002992:	a905      	add	r1, sp, #20
    HAL_GPIO_Init(Dither_PWM_GPIO_Port, &GPIO_InitStruct);
 8002994:	f7fe fa2a 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002998:	b00a      	add	sp, #40	; 0x28
 800299a:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM3)
 800299c:	4a0d      	ldr	r2, [pc, #52]	; (80029d4 <HAL_TIM_MspPostInit+0xe0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d1fa      	bne.n	8002998 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	9304      	str	r3, [sp, #16]
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_TIM_MspPostInit+0xd4>)
 80029a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	9304      	str	r3, [sp, #16]
 80029b8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = Dither_PWM_Pin;
 80029ba:	2340      	movs	r3, #64	; 0x40
 80029bc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	9306      	str	r3, [sp, #24]
 80029c2:	e7b6      	b.n	8002932 <HAL_TIM_MspPostInit+0x3e>
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020000 	.word	0x40020000
 80029d0:	40020400 	.word	0x40020400
 80029d4:	40000400 	.word	0x40000400

080029d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	4606      	mov	r6, r0
 80029dc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029de:	2214      	movs	r2, #20
 80029e0:	2100      	movs	r1, #0
 80029e2:	a803      	add	r0, sp, #12
 80029e4:	f000 f8d6 	bl	8002b94 <memset>
  if(huart->Instance==USART2)
 80029e8:	6832      	ldr	r2, [r6, #0]
 80029ea:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_UART_MspInit+0x98>)
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d13c      	bne.n	8002a6a <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f0:	2500      	movs	r5, #0
 80029f2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80029f6:	9501      	str	r5, [sp, #4]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	481e      	ldr	r0, [pc, #120]	; (8002a74 <HAL_UART_MspInit+0x9c>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80029fc:	4c1e      	ldr	r4, [pc, #120]	; (8002a78 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80029fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
 8002a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a06:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002a0a:	9201      	str	r2, [sp, #4]
 8002a0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	9502      	str	r5, [sp, #8]
 8002a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	9302      	str	r3, [sp, #8]
 8002a20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a22:	230c      	movs	r3, #12
 8002a24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a32:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a34:	2307      	movs	r3, #7
 8002a36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f7fe f9d8 	bl	8000dec <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_UART_MspInit+0xa4>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a3e:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a44:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a48:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4e:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a50:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a52:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a54:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a56:	61e5      	str	r5, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a58:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5a:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a5c:	f7fe f850 	bl	8000b00 <HAL_DMA_Init>
 8002a60:	b108      	cbz	r0, 8002a66 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8002a62:	f7ff fe5f 	bl	8002724 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a66:	6374      	str	r4, [r6, #52]	; 0x34
 8002a68:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a6a:	b008      	add	sp, #32
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
 8002a6e:	bf00      	nop
 8002a70:	40004400 	.word	0x40004400
 8002a74:	40020000 	.word	0x40020000
 8002a78:	2000002c 	.word	0x2000002c
 8002a7c:	40026088 	.word	0x40026088

08002a80 <NMI_Handler>:
 8002a80:	4770      	bx	lr

08002a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a82:	e7fe      	b.n	8002a82 <HardFault_Handler>

08002a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a84:	e7fe      	b.n	8002a84 <MemManage_Handler>

08002a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a86:	e7fe      	b.n	8002a86 <BusFault_Handler>

08002a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a88:	e7fe      	b.n	8002a88 <UsageFault_Handler>

08002a8a <SVC_Handler>:
 8002a8a:	4770      	bx	lr

08002a8c <DebugMon_Handler>:
 8002a8c:	4770      	bx	lr

08002a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a8e:	4770      	bx	lr

08002a90 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a90:	f7fd bd7e 	b.w	8000590 <HAL_IncTick>

08002a94 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a94:	4801      	ldr	r0, [pc, #4]	; (8002a9c <DMA1_Stream5_IRQHandler+0x8>)
 8002a96:	f7fe b8ef 	b.w	8000c78 <HAL_DMA_IRQHandler>
 8002a9a:	bf00      	nop
 8002a9c:	2000002c 	.word	0x2000002c

08002aa0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002aa0:	4801      	ldr	r0, [pc, #4]	; (8002aa8 <DMA2_Stream0_IRQHandler+0x8>)
 8002aa2:	f7fe b8e9 	b.w	8000c78 <HAL_DMA_IRQHandler>
 8002aa6:	bf00      	nop
 8002aa8:	20000194 	.word	0x20000194

08002aac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aac:	490f      	ldr	r1, [pc, #60]	; (8002aec <SystemInit+0x40>)
 8002aae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ab2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <SystemInit+0x44>)
 8002abc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002abe:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002ac6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ace:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ad4:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <SystemInit+0x48>)
 8002ad6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ade:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ae0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ae2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ae6:	608b      	str	r3, [r1, #8]
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000ed00 	.word	0xe000ed00
 8002af0:	40023800 	.word	0x40023800
 8002af4:	24003010 	.word	0x24003010

08002af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002afe:	e003      	b.n	8002b08 <LoopCopyDataInit>

08002b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b06:	3104      	adds	r1, #4

08002b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b08:	480b      	ldr	r0, [pc, #44]	; (8002b38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b10:	d3f6      	bcc.n	8002b00 <CopyDataInit>
  ldr  r2, =_sbss
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b14:	e002      	b.n	8002b1c <LoopFillZerobss>

08002b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b18:	f842 3b04 	str.w	r3, [r2], #4

08002b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b20:	d3f9      	bcc.n	8002b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b22:	f7ff ffc3 	bl	8002aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b26:	f000 f811 	bl	8002b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b2a:	f7ff fa65 	bl	8001ff8 <main>
  bx  lr    
 8002b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b34:	08002bec 	.word	0x08002bec
  ldr  r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b3c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002b40:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002b44:	200002c0 	.word	0x200002c0

08002b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <ADC_IRQHandler>
	...

08002b4c <__libc_init_array>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	4e0d      	ldr	r6, [pc, #52]	; (8002b84 <__libc_init_array+0x38>)
 8002b50:	4c0d      	ldr	r4, [pc, #52]	; (8002b88 <__libc_init_array+0x3c>)
 8002b52:	1ba4      	subs	r4, r4, r6
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	2500      	movs	r5, #0
 8002b58:	42a5      	cmp	r5, r4
 8002b5a:	d109      	bne.n	8002b70 <__libc_init_array+0x24>
 8002b5c:	4e0b      	ldr	r6, [pc, #44]	; (8002b8c <__libc_init_array+0x40>)
 8002b5e:	4c0c      	ldr	r4, [pc, #48]	; (8002b90 <__libc_init_array+0x44>)
 8002b60:	f000 f820 	bl	8002ba4 <_init>
 8002b64:	1ba4      	subs	r4, r4, r6
 8002b66:	10a4      	asrs	r4, r4, #2
 8002b68:	2500      	movs	r5, #0
 8002b6a:	42a5      	cmp	r5, r4
 8002b6c:	d105      	bne.n	8002b7a <__libc_init_array+0x2e>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b74:	4798      	blx	r3
 8002b76:	3501      	adds	r5, #1
 8002b78:	e7ee      	b.n	8002b58 <__libc_init_array+0xc>
 8002b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b7e:	4798      	blx	r3
 8002b80:	3501      	adds	r5, #1
 8002b82:	e7f2      	b.n	8002b6a <__libc_init_array+0x1e>
 8002b84:	08002be4 	.word	0x08002be4
 8002b88:	08002be4 	.word	0x08002be4
 8002b8c:	08002be4 	.word	0x08002be4
 8002b90:	08002be8 	.word	0x08002be8

08002b94 <memset>:
 8002b94:	4402      	add	r2, r0
 8002b96:	4603      	mov	r3, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <memset+0xa>
 8002b9c:	4770      	bx	lr
 8002b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba2:	e7f9      	b.n	8002b98 <memset+0x4>

08002ba4 <_init>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr

08002bb0 <_fini>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr
